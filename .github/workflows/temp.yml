name: Continuous Deployment

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - lib/**
      - src/**
      - test/**
      - state-machine.asl.yml
      - template.yml
      - .github/workflows/temp.yml

concurrency:
  group: ${{ github.workflow }}

jobs:
  build-ftp-docker:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        account-id:
          - "561178107736"
        region:
          # - us-east-1
          - us-west-2
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ matrix.region }}
          role-to-assume: arn:aws:iam::${{ matrix.account-id }}:role/DevOps-GitHubOidcFederatedRole
          role-session-name: GitHub_Workflow-Deploy_Porter
      - name: Configure ECR Credentials
        run: aws ecr get-login-password --region ${{ matrix.region }} | docker login --username AWS --password-stdin ${{ matrix.account-id }}.dkr.ecr.${{ matrix.region }}.amazonaws.com
      - name: Get Directory Hash
        id: directory-hash
        run: |
          # Calculate the SHA1 hash of the ftp directory
          sha1=`find src/containers/ftp -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum | awk '{ print $1 }'`

          echo "::set-output name=hash::$sha1"
      - name: Get ECR repository name
        id: ecr-repo
        run: |
          # Construct the ECR repository name from the GitHub repository name and a package identifier
          unsafe_ecr_repo_name="${{ github.repository }}-ftp"

          # Do any transformations necessary to satisfy ECR naming requirements:
          # Start with letter, [a-z0-9-_/.] (maybe, docs are unclear)
          safe_ecr_repo_name=$(echo "$unsafe_ecr_repo_name" | tr '[:upper:]' '[:lower:]')

          echo "::set-output name=name::$safe_ecr_repo_name"
      - name: Get Docker image name
        id: docker-image
        run: |
          # Construct the Docker image name:tag using the hash
          image_name="${{ matrix.account-id }}.dkr.ecr.${{ matrix.region }}.amazonaws.com/${{ steps.ecr-repo.outputs.name }}:${{ steps.directory-hash.outputs.hash }}"

          echo "::set-output name=name::$image_name"
      - name: Create ECR Repository
        run: |
          aws ecr describe-repositories --repository-names "${{ steps.ecr-repo.outputs.name }}"

          # Only create the repository if it doesn't exist
          # output=$(aws ecr describe-repositories --repository-names "${{ steps.ecr-repo.outputs.name }}" 2>&1)
          # echo "$output"

          # if [ $? -ne 0 ]; then
          #   if echo ${output} | grep -q RepositoryNotFoundException; then
          #     echo "Creating ECR repository: ${{ steps.ecr-repo.outputs.name }}"
          #     aws ecr create-repository --repository-name "${{ steps.ecr-repo.outputs.name }}"
          #   else
          #     echo "${{ steps.ecr-repo.outputs.name }} already exists"
          #     >&2 echo ${output}
          #   fi
          # fi
      - name: Build & Publish Docker Image
        run: |
          # See if the tag already exists in the repository
          # tag_lookup=`aws ecr describe-images --repository-name "${{ steps.ecr-repo.outputs.name }}" --image-ids imageTag="${{ steps.directory-hash.outputs.hash }}" || echo "notFound"`

          if [ "$tag_lookup" = "notFound" ]; then
            docker build -t ftp src/containers/ftp
            docker tag ftp:latest "${{ steps.docker-image.outputs.name }}"
            docker push "${{ steps.docker-image.outputs.name }}"
          else
            echo "Docker image already exists for this commit"
          fi
