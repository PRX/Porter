# etc/sample-step-functions.yml
AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Creates a Step Function state machine for processing user created content, as
  well as some supporting resources
Parameters:
  OpsWarnMessagesSnsTopic:
    Type: String
  OpsErrorMessagesSnsTopic:
    Type: String
  StackResourcesBucket:
    Type: String
  AwsXraySdkLambdaLayerVersionArn:
    Type: String
  FfmepgLambdaLayerVersionArn:
    Type: String
  MpckLambdaLayerVersionArn:
    Type: String
  JobExecutionSnsTopicLambdaFunctionS3ObjectVersion:
    Type: String
  IngestLambdaFunctionS3ObjectVersion:
    Type: String
  InspectMediaLambdaFunctionS3ObjectVersion:
    Type: String
  CopyLambdaFunctionS3ObjectVersion:
    Type: String
  TranscodeMediaLambdaFunctionS3ObjectVersion:
    Type: String
  JobCallbackLambdaFunctionS3ObjectVersion:
    Type: String
Resources:
  ##############################################################################
  ##############################################################################
  ## FOR DEBUGGING USE ONLY
  DebugSnsTopic:
    Type: AWS::SNS::Topic
  DebugSqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      Tags:
        - Key: Project
          Value: Rexif
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  ## END FOR DEBUGGING USE ONLY
  ##############################################################################
  ##############################################################################
  # SNS
  ## Messages sent to this topic will be handled by a Lambda function which
  ## executes the Step Functions state machine. The `input` to the state machine
  ## execution will be the body of the SNS message. The SNS message must be
  ## valic JSON.
  JobExecutionSnsTopic:
    Type: AWS::SNS::Topic
  JobExecutionSnsTopicLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Path: "/"
      Policies:
        - PolicyName: StepFunctionsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource:
                  - !Ref StateMachine
      Tags:
        - Key: Project
          Value: Rexif
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  JobExecutionSnsTopicLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref StackResourcesBucket
        S3Key: !Sub ${AWS::StackName}/lambdas/JobExecutionSnsTopicLambdaFunction.zip
        S3ObjectVersion: !Ref JobExecutionSnsTopicLambdaFunctionS3ObjectVersion
      Description: >
        Relays SNS messages sent to a subscribed topic to a State Machine
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref StateMachine
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayerVersionArn
      MemorySize: 128
      Role: !GetAtt JobExecutionSnsTopicLambdaIamRole.Arn
      Runtime: nodejs10.x
      Tags:
        - Key: Project
          Value: Rexif
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
      Timeout: 8
  JobExecutionSnsTopicLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt JobExecutionSnsTopicLambdaFunction.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref JobExecutionSnsTopic
  JobExecutionSnsTopicLambdaSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt JobExecutionSnsTopicLambdaFunction.Arn
      Protocol: lambda
      TopicArn: !Ref JobExecutionSnsTopic
# VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Project
          Value: Rexif
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Project
          Value: Rexif
        - Key: Name
          Value: !Sub ${AWS::StackName}-InternetGateway
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Project
          Value: Rexif
        - Key: Name
          Value: !Sub ${AWS::StackName}-RouteTable
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  Route:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: 0.0.0.0/0
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Join ["", [!Ref "AWS::Region", a]]
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Project
          Value: Rexif
        - Key: Name
          Value: !Sub ${AWS::StackName}-Subnet-1
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Join ["", [!Ref "AWS::Region", b]]
      CidrBlock: 10.0.2.0/24
      Tags:
        - Key: Project
          Value: Rexif
        - Key: Name
          Value: !Sub ${AWS::StackName}-Subnet-2
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable
  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref RouteTable
  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Project
          Value: Rexif
        - Key: Name
          Value: !Sub ${AWS::StackName}-NetworkAcl
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  InboundTrafficNetworkAclEntry:
    # TODO This is only for debugging
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref NetworkAcl
      Protocol: -1 # All
      RuleAction : allow
      RuleNumber : 100
  OutboudTrafficNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref NetworkAcl
      Protocol: -1 # All
      RuleAction : allow
      RuleNumber : 100
  Subnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref Subnet1
      NetworkAclId: !Ref NetworkAcl
  Subnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref Subnet2
      NetworkAclId: !Ref NetworkAcl
  DhcpOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: ec2.internal
      DomainNameServers:
        - AmazonProvidedDNS
      Tags:
        - Key: Project
          Value: Rexif
        - Key: Name
          Value: !Sub ${AWS::StackName}-DhcpOptions
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  DhcpOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      DhcpOptionsId: !Ref DhcpOptions
      VpcId: !Ref VPC
  # ECS Cluster
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      Tags:
        - Key: Project
          Value: Rexif
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  # Transcode ECS Service
  TranscodeEcsTaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
  TranscodeEcsTaskExecutionIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
      Description: String
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Path: "/"
      Tags:
        - Key: Project
          Value: Rexif
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  TranscodeEcsTaskIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
      Description: String
      Path: "/"
      Policies:
        - PolicyName: S3PutPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:Put*"
                Resource:
                  - "arn:aws:s3:::farski-sandbox-prx"
                  - "arn:aws:s3:::farski-sandbox-prx/*"
        - PolicyName: S3ArtifactBucketPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:Get*"
                Resource:
                  - !Sub "arn:aws:s3:::${ArtifactBucket}"
                  - !Sub "arn:aws:s3:::${ArtifactBucket}/*"
      Tags:
        - Key: Project
          Value: Rexif
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  TranscodeEcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        -
          # Command:
          #   - "$TASK_TOKEN"
          # EntryPoint:
          #   - echo
          Environment:
            - Name: FOO
              Value: bar
          Essential: true
          Image: 561178107736.dkr.ecr.us-east-1.amazonaws.com/rexif-prototype:latest
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref TranscodeEcsTaskLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Name: !Sub ${AWS::StackName}-transcode-container
      Cpu: "4096"
      ExecutionRoleArn: !GetAtt TranscodeEcsTaskExecutionIamRole.Arn
      Memory: "8192"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Project
          Value: Rexif
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      TaskRoleArn: !GetAtt TranscodeEcsTaskIamRole.Arn
      # Volumes:
      #   - Volume
  # Artifact Bucket
  ArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 1
            Status: Enabled
      Tags:
        - Key: Project
          Value: Rexif
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  # Ingest Lambda
  IngestLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Path: "/"
      Policies:
        - PolicyName: S3ArtifactBucketPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource:
                  - !Sub "arn:aws:s3:::${ArtifactBucket}"
                  - !Sub "arn:aws:s3:::${ArtifactBucket}/*"
        - PolicyName: S3CopyPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:Get*"
                Resource:
                  - "*"
      Tags:
        - Key: Project
          Value: Rexif
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  IngestLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref StackResourcesBucket
        S3Key: !Sub ${AWS::StackName}/lambdas/IngestLambdaFunction.zip
        S3ObjectVersion: !Ref IngestLambdaFunctionS3ObjectVersion
      Description: >
        Ingests a source file to a predefined S3 artifact bucket
      Environment:
        Variables:
          ARTIFACT_BUCKET_NAME: !Ref ArtifactBucket
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayerVersionArn
      MemorySize: 512
      Role: !GetAtt IngestLambdaIamRole.Arn
      Runtime: nodejs10.x
      Tags:
        - Key: Project
          Value: Rexif
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
      Timeout: 90
      TracingConfig:
        Mode: Active
  # Inspect Lambda
  InspectMediaLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Path: "/"
      Policies:
        - PolicyName: S3ArtifactBucketPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:Get*"
                Resource:
                  - !Sub "arn:aws:s3:::${ArtifactBucket}"
                  - !Sub "arn:aws:s3:::${ArtifactBucket}/*"
      Tags:
        - Key: Project
          Value: Rexif
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  InspectMediaLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref StackResourcesBucket
        S3Key: !Sub ${AWS::StackName}/lambdas/InspectMediaLambdaFunction.zip
        S3ObjectVersion: !Ref InspectMediaLambdaFunctionS3ObjectVersion
      Description: >
        Inspects (ffprobe, etc) the source file
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayerVersionArn
        - !Ref FfmepgLambdaLayerVersionArn
        - !Ref MpckLambdaLayerVersionArn
      MemorySize: 512
      Role: !GetAtt InspectMediaLambdaIamRole.Arn
      Runtime: nodejs10.x
      Tags:
        - Key: Project
          Value: Rexif
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
      Timeout: 30
      TracingConfig:
        Mode: Active
  # Copy Lambda
  CopyLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Path: "/"
      Policies:
        - PolicyName: S3MediaBucketPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource:
                  - !Sub "arn:aws:s3:::${ArtifactBucket}"
                  - !Sub "arn:aws:s3:::${ArtifactBucket}/*"
        - PolicyName: S3PutPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:Put*"
                Resource:
                  - "arn:aws:s3:::farski-sandbox-prx"
                  - "arn:aws:s3:::farski-sandbox-prx/*"
      Tags:
        - Key: Project
          Value: Rexif
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  CopyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref StackResourcesBucket
        S3Key: !Sub ${AWS::StackName}/lambdas/CopyLambdaFunction.zip
        S3ObjectVersion: !Ref CopyLambdaFunctionS3ObjectVersion
      Description: >
        Copies an object in S3 to another location in S3
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayerVersionArn
      MemorySize: 512
      Role: !GetAtt CopyLambdaIamRole.Arn
      Runtime: nodejs10.x
      Tags:
        - Key: Project
          Value: Rexif
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
      Timeout: 30
      TracingConfig:
        Mode: Active
  # Transcode Lambda
  TranscodeMediaLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Path: "/"
      Policies:
        - PolicyName: S3PutPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:Put*"
                Resource:
                  - "*"
        - PolicyName: ArtifactBucketPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:Get*"
                  - "s3:List*"
                Resource:
                  - !Sub "arn:aws:s3:::${ArtifactBucket}"
                  - !Sub "arn:aws:s3:::${ArtifactBucket}/*"
      Tags:
        - Key: Project
          Value: Rexif
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  TranscodeMediaLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref StackResourcesBucket
        S3Key: !Sub ${AWS::StackName}/lambdas/TranscodeMediaLambdaFunction.zip
        S3ObjectVersion: !Ref TranscodeMediaLambdaFunctionS3ObjectVersion
      Description: >
        Encodes a source file using ffmpeg
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayerVersionArn
        - !Ref FfmepgLambdaLayerVersionArn
        - !Ref MpckLambdaLayerVersionArn
      MemorySize: 3008
      Role: !GetAtt TranscodeMediaLambdaIamRole.Arn
      Runtime: nodejs10.x
      Tags:
        - Key: Project
          Value: Rexif
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
      Timeout: 300
      TracingConfig:
        Mode: Active
  # Callback Lambda
  JobCallbackLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Path: "/"
      Policies:
        - PolicyName: Sns
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sns:Publish"
                Resource:
                  - "*"
        - PolicyName: Sqs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sqs:SendMessage"
                Resource:
                  - "*"
      Tags:
        - Key: Project
          Value: Rexif
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  JobCallbackLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref StackResourcesBucket
        S3Key: !Sub ${AWS::StackName}/lambdas/JobCallbackLambdaFunction.zip
        S3ObjectVersion: !Ref JobCallbackLambdaFunctionS3ObjectVersion
      Description: >
        Sends a job or task callback message to a single endpoint
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayerVersionArn
      MemorySize: 256
      Role: !GetAtt JobCallbackLambdaIamRole.Arn
      Runtime: nodejs10.x
      Tags:
        - Key: Project
          Value: Rexif
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
      Timeout: 300
      TracingConfig:
        Mode: Active
  # Step Functions
  StateMachineIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Path: "/"
      Policies:
        - PolicyName: LambdaTaskPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt IngestLambdaFunction.Arn
                  - !GetAtt CopyLambdaFunction.Arn
                  - !GetAtt InspectMediaLambdaFunction.Arn
                  - !GetAtt TranscodeMediaLambdaFunction.Arn
                  - !GetAtt JobCallbackLambdaFunction.Arn
        - PolicyName: PassRoleToEcsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !GetAtt TranscodeEcsTaskExecutionIamRole.Arn
                  - !GetAtt TranscodeEcsTaskIamRole.Arn
        # https://docs.aws.amazon.com/step-functions/latest/dg/ecs-iam.html
        - PolicyName: EcsSyncStaticResourcesPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecs:RunTask
                Resource:
                  - "*"
                  # - "arn:aws:ecs:[[region]]:[[accountId]]:task-definition/[[taskDefinition]]"
              - Effect: Allow
                Action:
                  - ecs:StopTask
                  - ecs:DescribeTasks
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - events:PutTargets
                  - events:PutRule
                  - events:DescribeRule
                Resource:
                  - !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForECSTaskRule"
        # https://docs.aws.amazon.com/step-functions/latest/dg/ecs-iam.html
        - PolicyName: EcsSyncDynamicResourcesPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecs:RunTask
                  - ecs:StopTask
                  - ecs:DescribeTasks
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - events:PutTargets
                  - events:PutRule
                  - events:DescribeRule
                Resource:
                  - !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForECSTaskRule"
      Tags:
        - Key: Project
          Value: Rexif
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        Fn::Sub:
          - |-
            {
              "StartAt": "IngestSourceFile",
              "States": {
                "IngestSourceFile": {
                  "Comment": "(I/O {Job}/{Job,Artifact}) Downloads the given source file to S3",
                  "Type": "Task",
                  "Resource": "${IngestLambdaFunctionArn}",
                  "InputPath": "$",
                  "Parameters": {
                    "Job": {
                      "Source.$": "$.Job.Source"
                    },
                    "Execution": {
                      "Id.$": "$$.Execution.Id"
                    }
                  },
                  "ResultPath": "$.Artifact",
                  "Next": "JobTasks",
                  "Retry": [
                    {
                      "ErrorEquals": ["States.ALL"],
                      "IntervalSeconds": 5,
                      "MaxAttempts": 3,
                      "BackoffRate": 2
                    }
                  ],
                  "Catch": [
                    {
                      "ErrorEquals": ["States.ALL"],
                      "ResultPath": "$.Error",
                      "Next": "JobErrorCallbacks"
                    }
                  ]
                },
                "JobTasks": {
                  "Type": "Parallel",
                  "Comment": "(I/O {Job,Artifact}/{Job,Artifact,JobTaskResults}) Executes the tasks defined by the input job",
                  "InputPath": "$",
                  "ResultPath": "$.JobTaskResults",
                  "Next": "JobCallbacks",
                  "Catch": [
                    {
                      "ErrorEquals": ["States.ALL"],
                      "ResultPath": "$.Error",
                      "Next": "JobErrorCallbacks"
                    }
                  ],
                  "Branches": [
                    {
                      "StartAt": "InspectBranch",
                      "States": {
                        "InspectBranch": {
                          "Type": "Choice",
                          "Comment": "(I/O {Job,Artifact}/{Job,Artifact}) Determines if the Inspect operation was included in the job",
                          "Choices": [
                            { "Variable": "$.Job.Inspect.Perform", "BooleanEquals": true, "Next": "Inspect" },
                            { "Variable": "$.Job.Inspect.Perform", "BooleanEquals": false, "Next": "SkipInspect"}
                          ]
                        },
                        "SkipInspect": {
                          "Type": "Pass",
                          "Comment": "(I/O {Job,Artifact}/{TaskResult})",
                          "End": true,
                          "ResultPath": "$",
                          "Result": {
                            "TaskResult": {
                              "Task": "Null"
                            }
                          }
                        },
                        "Inspect": {
                          "Type": "Task",
                          "Comment": "(I/O {Job,Artifact}/{Job,Artifact,TaskResult}) Inspects the source file",
                          "Resource": "${InspectMediaLambdaFunctionArn}",
                          "InputPath": "$",
                          "Parameters": {
                            "Job": { "Id.$": "$.Job.Id" },
                            "Artifact.$": "$.Artifact"
                          },
                          "ResultPath": "$.TaskResult",
                          "Next": "InspectCallbacks"
                        },
                        "InspectCallbacks": {
                          "Type": "Map",
                          "Comment": "(I/O {Job,Artifact,TaskResult}/{Job,Artifact,TaskResult,Void}) Sends a successful inspection result to each callback defined in the job via an iterator",
                          "End": true,
                          "InputPath": "$",
                          "ItemsPath": "$.Job.Callbacks",
                          "Parameters": {
                            "Callback.$": "$$.Map.Item.Value",
                            "TaskResult": {
                              "Job": { "Id.$": "$.Job.Id" },
                              "Result.$": "$.TaskResult"
                            }
                          },
                          "ResultPath": "$.Void",
                          "MaxConcurrency": 0,
                          "Iterator": {
                            "StartAt": "SendInspectCallback",
                            "States": {
                              "SendInspectCallback": {
                                "Type": "Task",
                                "Comment": "(I/O {Callback,TaskResult}/{Callback,TaskResult,Void}) Sends a successful task result for a single callback in the iterator",
                                "Resource": "${JobCallbackLambdaFunctionArn}",
                                "ResultPath": "$.Void",
                                "OutputPath": "$.TaskResult.Job.Id",
                                "End": true,
                                "Retry": [
                                  {
                                    "ErrorEquals": ["States.ALL"],
                                    "IntervalSeconds": 5,
                                    "MaxAttempts": 3,
                                    "BackoffRate": 2
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }, {
                      "StartAt": "CopyBranch",
                      "States": {
                        "CopyBranch": {
                          "Type": "Choice",
                          "Comment": "(I/O {Job,Artifact}/{Job,Artifact}) Determines if the Copy operation was included in the job",
                          "Choices": [
                            { "Variable": "$.Job.Copy.Perform", "BooleanEquals": true, "Next": "CopyAll" },
                            { "Variable": "$.Job.Copy.Perform", "BooleanEquals": false, "Next": "SkipCopy"}
                          ]
                        },
                        "SkipCopy": {
                          "Type": "Pass",
                          "Comment": "(I/O {Job,Artifact}/{TaskResult})",
                          "End": true,
                          "ResultPath": "$",
                          "Result": {
                            "TaskResult": {
                              "Task": "Null"
                            }
                          }
                        },
                        "CopyAll": {
                          "Type": "Map",
                          "Comment": "(I/O {Job,Artifact}/[{Job,Artifact,Copy,TaskResult,Void}])",
                          "End": true,
                          "InputPath": "$",
                          "ItemsPath": "$.Job.Copy.Destinations",
                          "Parameters": {
                            "Copy.$": "$$.Map.Item.Value",
                            "Job": {
                              "Id.$": "$.Job.Id",
                              "Callbacks.$": "$.Job.Callbacks"
                            },
                            "Artifact.$": "$.Artifact"
                          },
                          "MaxConcurrency": 0,
                          "Iterator": {
                            "StartAt": "CopyEach",
                            "States": {
                              "CopyEach": {
                                "Type": "Task",
                                "Comment": "(I/O {Job,Artifact,Copy}/{Job,Artifact,Copy,TaskResult})",
                                "Resource": "${CopyLambdaFunctionArn}",
                                "InputPath": "$",
                                "ResultPath": "$.TaskResult",
                                "Next": "CopyCallbacks",
                                "Retry": [
                                  {
                                    "ErrorEquals": ["States.ALL"],
                                    "IntervalSeconds": 5,
                                    "MaxAttempts": 3,
                                    "BackoffRate": 2
                                  }
                                ]
                              },
                              "CopyCallbacks": {
                                "Type": "Map",
                                "Comment": "(I/O {Job,Artifact,Copy,TaskResult}/{Job,Artifact,Copy,TaskResult,Void})",
                                "End": true,
                                "InputPath": "$",
                                "ItemsPath": "$.Job.Callbacks",
                                "Parameters": {
                                  "Callback.$": "$$.Map.Item.Value",
                                  "TaskResult": {
                                    "Job.$": "$.Job",
                                    "Result.$": "$.TaskResult"
                                  }
                                },
                                "ResultPath": "$.Void",
                                "MaxConcurrency": 0,
                                "Iterator": {
                                  "StartAt": "SendCopyCallback",
                                  "States": {
                                    "SendCopyCallback": {
                                      "Type": "Task",
                                      "Comment": "(I/O {TaskResult,Callback}/id)",
                                      "Resource": "${JobCallbackLambdaFunctionArn}",
                                      "ResultPath": "$.Void",
                                      "OutputPath": "$.TaskResult.Job.Id",
                                      "End": true,
                                      "Retry": [
                                        {
                                          "ErrorEquals": ["States.ALL"],
                                          "IntervalSeconds": 5,
                                          "MaxAttempts": 3,
                                          "BackoffRate": 2
                                        }
                                      ]
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }, {
                      "StartAt": "FargateTranscodeBranch",
                      "States": {
                        "FargateTranscodeBranch": {
                          "Type": "Choice",
                          "Comment": "(I/O {Job,Artifact}/{Job,Artifact}) Determines if the Transcode operation was included in the job",
                          "Choices": [
                            { "Variable": "$.Job.Transcode.Perform", "BooleanEquals": true, "Next": "FargateTranscodeAll" },
                            { "Variable": "$.Job.Transcode.Perform", "BooleanEquals": false, "Next": "SkipFargateTranscode"}
                          ]
                        },
                        "SkipFargateTranscode": {
                          "Type": "Pass",
                          "Comment": "(I/O {Job,Artifact}/{TaskResult})",
                          "End": true,
                          "ResultPath": "$",
                          "Result": {
                            "TaskResult": {
                              "Task": "Null"
                            }
                          }
                        },
                        "FargateTranscodeAll": {
                          "Type": "Map",
                          "Comment": "(I/O {Job,Artifact}/[{Job,Artifact,Transcode,TaskResult,Void}])",
                          "End": true,
                          "InputPath": "$",
                          "ItemsPath": "$.Job.Transcode.Encodings",
                          "Parameters": {
                            "Encoding.$": "$$.Map.Item.Value",
                            "Job": {
                              "Id.$": "$.Job.Id",
                              "Callbacks.$": "$.Job.Callbacks"
                            },
                            "Artifact.$": "$.Artifact"
                          },
                          "MaxConcurrency": 0,
                          "Iterator": {
                            "StartAt": "FargateTranscodeEach",
                            "States": {
                              "FargateTranscodeEach": {
                                "Type": "Task",
                                "Comment": "(I/O {Job,Artifact,Transcode}/{Job,Artifact,Transcode,TaskResult})",
                                "Resource": "arn:aws:states:::ecs:runTask.sync",
                                "Parameters": {
                                  "Cluster": "${EcsClusterArn}",
                                  "LaunchType":"FARGATE",
                                  "Overrides": {
                                    "ContainerOverrides": [
                                      {
                                        "Environment": [
                                          {
                                            "Name": "STATE_MACHINE_EXECUTION_ID",
                                            "Value.$": "$$.Execution.Id"
                                          }, {
                                            "Name": "STATE_MACHINE_ARTIFACT_BUCKET_NAME",
                                            "Value.$": "$.Artifact.BucketName"
                                          }, {
                                            "Name": "STATE_MACHINE_ARTIFACT_OBJECT_KEY",
                                            "Value.$": "$.Artifact.ObjectKey"
                                          }, {
                                            "Name": "STATE_MACHINE_DESTINATION_BUCKET_NAME",
                                            "Value.$": "$.Encoding.Destination.BucketName"
                                          }, {
                                            "Name": "STATE_MACHINE_DESTINATION_OBJECT_KEY",
                                            "Value.$": "$.Encoding.Destination.ObjectKey"
                                          }, {
                                            "Name": "STATE_MACHINE_DESTINATION_FORMAT",
                                            "Value.$": "$.Encoding.Format"
                                          }, {
                                            "Name": "STATE_MACHINE_JOB_ID",
                                            "Value.$": "$.Job.Id"
                                          }
                                        ],
                                        "Name": "${TranscodeContainerName}"
                                      }
                                    ]
                                  },
                                  "NetworkConfiguration": {
                                    "AwsvpcConfiguration": {
                                      "AssignPublicIp": "ENABLED",
                                      "Subnets": [
                                        "${VpcSubnet1}",
                                        "${VpcSubnet2}"
                                      ]
                                    }
                                  },
                                  "TaskDefinition": "${TranscodeEcsTaskDefinitionArn}"
                                },
                                "InputPath": "$",
                                "ResultPath": "$.EcsTaskRunDetails",
                                "Next": "FargateTranscodeCallbacks",
                                "Retry": [
                                  {
                                    "ErrorEquals": ["States.ALL"],
                                    "IntervalSeconds": 5,
                                    "MaxAttempts": 3,
                                    "BackoffRate": 2
                                  }
                                ]
                              },
                              "FargateTranscodeCallbacks": {
                                "Type": "Map",
                                "Comment": "(I/O {Job,Artifact,Transcode,EcsTaskRunDetails}/{Job,Artifact,Transcode,TaskResult,Void})",
                                "End": true,
                                "InputPath": "$",
                                "ItemsPath": "$.Job.Callbacks",
                                "Parameters": {
                                  "Callback.$": "$$.Map.Item.Value",
                                  "TaskResult": {
                                    "Job.$": "$.Job",
                                    "Result": {
                                      "Task": "Transcode",
                                      "BucketName.$": "$.Encoding.Destination.BucketName",
                                      "ObjectKey.$": "$.Encoding.Destination.ObjectKey"
                                    }
                                  }
                                },
                                "ResultPath": "$.Void",
                                "MaxConcurrency": 0,
                                "Iterator": {
                                  "StartAt": "SendFargateTranscodeCallback",
                                  "States": {
                                    "SendFargateTranscodeCallback": {
                                      "Type": "Task",
                                      "Comment": "(I/O {TaskResult,Callback}/id)",
                                      "Resource": "${JobCallbackLambdaFunctionArn}",
                                      "ResultPath": "$.Void",
                                      "OutputPath": "$.TaskResult.Job.Id",
                                      "End": true,
                                      "Retry": [
                                        {
                                          "ErrorEquals": ["States.ALL"],
                                          "IntervalSeconds": 5,
                                          "MaxAttempts": 3,
                                          "BackoffRate": 2
                                        }
                                      ]
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "JobCallbacks": {
                  "Type": "Map",
                  "Comment": "Sends a successful job result to each callback defined in the job via an iterator",
                  "End": true,
                  "InputPath": "$",
                  "ItemsPath": "$.Job.Callbacks",
                  "Parameters": {
                    "Callback.$": "$$.Map.Item.Value",
                    "JobResult": {
                      "Job": { "Id.$": "$.Job.Id" },
                      "Result.$": "$.JobTaskResults..[?(@.Task && @.Task != 'Null')]"
                    }
                  },
                  "MaxConcurrency": 0,
                  "Iterator": {
                    "StartAt": "SendCallback",
                    "States": {
                      "SendCallback": {
                        "Type": "Task",
                        "Comment": "Sends a successful job result for a single callback in the iterator",
                        "Resource": "${JobCallbackLambdaFunctionArn}",
                        "End": true,
                        "Retry": [
                          {
                            "ErrorEquals": ["States.ALL"],
                            "IntervalSeconds": 5,
                            "MaxAttempts": 3,
                            "BackoffRate": 2
                          }
                        ]
                      }
                    }
                  }
                },
                "JobErrorCallbacks": {
                  "Type": "Map",
                  "Comment": "(I/O {Job,Error}/null) Sends an error result to each callback defined in the job via an iterator",
                  "End": true,
                  "InputPath": "$",
                  "ItemsPath": "$.Job.Callbacks",
                  "Parameters": {
                    "Callback.$": "$$.Map.Item.Value",
                    "JobResult": {
                      "Job": { "Id.$": "$.Job.Id" },
                      "Error.$": "$.Error"
                    }
                  },
                  "MaxConcurrency": 0,
                  "Iterator": {
                    "StartAt": "SendErrorCallback",
                    "States": {
                      "SendErrorCallback": {
                        "Type": "Task",
                        "Comment": "Sends an error result for a single callback in the iterator",
                        "Resource": "${JobCallbackLambdaFunctionArn}",
                        "End": true,
                        "Retry": [
                          {
                            "ErrorEquals": ["States.ALL"],
                            "IntervalSeconds": 5,
                            "MaxAttempts": 3,
                            "BackoffRate": 2
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          - IngestLambdaFunctionArn: !GetAtt IngestLambdaFunction.Arn
            CopyLambdaFunctionArn: !GetAtt CopyLambdaFunction.Arn
            InspectMediaLambdaFunctionArn: !GetAtt InspectMediaLambdaFunction.Arn
            JobCallbackLambdaFunctionArn: !GetAtt JobCallbackLambdaFunction.Arn
            EcsClusterArn: !GetAtt EcsCluster.Arn
            TranscodeEcsTaskDefinitionArn: !Ref TranscodeEcsTaskDefinition
            VpcSubnet1: !Ref Subnet1
            VpcSubnet2: !Ref Subnet2
            TranscodeContainerName: !Sub ${AWS::StackName}-transcode-container
      RoleArn: !GetAtt StateMachineIamRole.Arn
      Tags:
        - Key: Project
          Value: Rexif
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  StateMachineTimedOutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmName: "[Rexif][States] Experiencing time outs"
      AlarmActions:
        - !Ref OpsWarnMessagesSnsTopic
      InsufficientDataActions:
        - !Ref OpsWarnMessagesSnsTopic
      OKActions:
        - !Ref OpsWarnMessagesSnsTopic
      AlarmDescription: >
        Rexif state machine has experienced execution time outs
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: ExecutionsTimedOut
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref StateMachine
  StateMachineThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmName: "[Rexif][States] Events being throttled"
      AlarmActions:
        - !Ref OpsWarnMessagesSnsTopic
      InsufficientDataActions:
        - !Ref OpsWarnMessagesSnsTopic
      OKActions:
        - !Ref OpsWarnMessagesSnsTopic
      AlarmDescription: >
        Rexif state machine is being throttled
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: ExecutionThrottled
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref StateMachine
  StateMachineFailureAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmName: "[Rexif][States] Experiencing failures"
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopic
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopic
      OKActions:
        - !Ref OpsErrorMessagesSnsTopic
      AlarmDescription: >
        Rexif state machine is being throttled
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: ExecutionsFailed
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref StateMachine
Outputs:
  JobExecutionSnsTopicArn:
    Value: !Ref JobExecutionSnsTopic
