AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >-
  Creates a Step Function state machine for processing user created content, as
  well as some supporting resources
Conditions:
  CreateProductionResources: !Equals [!Ref EnvironmentType, Production]
  CreateSqsEventMapping: !Equals [!Ref EnableSqsJobExecution, 'True']
Parameters:
  EnvironmentType:
    Type: String
    AllowedValues:
      - Testing
      - Staging
      - Production
  TranscodeJobNamePrefix:
    Type: String
  OpsWarnMessagesSnsTopicArn:
    Type: String
  OpsErrorMessagesSnsTopicArn:
    Type: String
  AwsXraySdkLambdaLayerVersionArn:
    Type: String
  FfmpegLambdaLayerVersionArn:
    Type: String
  MpckLambdaLayerVersionArn:
    Type: String
  NpmSharpLambdaLayerVersionArn:
    Type: String
  NpmFileTypeLambdaLayerVersionArn:
    Type: String
  TranscodeEcsTaskDefinitionImage:
    Type: String
  EnableSqsJobExecution:
    Type: String
    AllowedValues:
      - 'True'
      - 'False'
Resources:
  # Managed IAM Policies
  ArtifactBucketReadOnlyAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: >-
        Provides read-only access to the artifact bucket for a particular
        Porter deployment
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - s3:GetObject*
            Effect: Allow
            Resource:
              - !Sub arn:aws:s3:::${ArtifactBucket}/*
  ArtifactBucketWriteAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: >-
        Provides limitedS S3 list and write access to the artifact bucket for a
        particular Porter deployment
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:ListBucketMultipartUploads
            Resource:
              - !Sub arn:aws:s3:::${ArtifactBucket}
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:AbortMultipartUpload
              - s3:ListMultipartUploadParts
            Resource:
              - !Sub arn:aws:s3:::${ArtifactBucket}/*
  # General-Purpose IAM Roles
  S3DestinationWriterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              AWS:
                - !GetAtt CopyLambdaIamRole.Arn
                - !GetAtt ImageTransformLambdaIamRole.Arn
                - !GetAtt TranscriptionJobResultsLambdaIamRole.Arn
                - !GetAtt CallbackLambdaIamRole.Arn
                - !GetAtt TranscodeEcsTaskIamRole.Arn
      ManagedPolicyArns:
        # Calls to s3.copyObject need read access to the artifact bucket
        - !Ref ArtifactBucketReadOnlyAccessPolicy
      Policies:
        # For cross-account S3 buckets, the IAM role needs the same
        # permissions that the bucket policy grans to this role
        - PolicyName: S3DestinationWritePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucketMultipartUploads
                  - s3:PutObject*
                  - s3:AbortMultipartUpload
                  - s3:ListMultipartUploadParts
                Resource:
                  - '*'
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  # SNS
  ## Messages sent to this topic will be handled by a Lambda function which
  ## executes the Step Functions state machine. The `input` to the state machine
  ## execution will be the body of the SNS message. The SNS message must be
  ## valic JSON.
  JobExecutionSnsTopic:
    Type: AWS::SNS::Topic
  JobExecutionSnsTopicLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: StepFunctionsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource:
                  - !Ref StateMachine
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  JobExecutionSnsTopicLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/JobExecutionSnsTopicLambdaFunction/
      Description: >-
        Relays SNS messages sent to a subscribed topic to a State Machine
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref StateMachine
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayerVersionArn
      MemorySize: 128
      Role: !GetAtt JobExecutionSnsTopicLambdaIamRole.Arn
      Runtime: nodejs12.x
      Tags:
        Project: Porter
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
      Timeout: 8
  JobExecutionSnsTopicLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${JobExecutionSnsTopicLambdaFunction}
      RetentionInDays: 30
  JobExecutionSnsTopicLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt JobExecutionSnsTopicLambdaFunction.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref JobExecutionSnsTopic
  JobExecutionSnsTopicLambdaSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt JobExecutionSnsTopicLambdaFunction.Arn
      Protocol: lambda
      TopicArn: !Ref JobExecutionSnsTopic
  JobExecutionSnsTopicLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: '[Porter][SNS][Lambda] Elevated error volume'
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: >-
        Job execution function has encountered an invocation error
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref JobExecutionSnsTopicLambdaFunction
  # SQS
  ## Messages sent to this queue will be handled by a Lambda function which
  ## executes the Step Functions state machine. The `input` to the state machine
  ## execution will be the body of the SQS message. The SQS message must be
  ## valic JSON.
  JobExecutionSqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  JobExecutionSqsQueueLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: SqsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ChangeMessageVisibility
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ReceiveMessage
                Resource:
                  - !GetAtt JobExecutionSqsQueue.Arn
        - PolicyName: StepFunctionsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource:
                  - !Ref StateMachine
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  JobExecutionSqsQueueLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/JobExecutionSqsQueueLambdaFunction/
      Description: >-
        Relays SQS messages sent to a subscribed queue to a State Machine
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref StateMachine
      Events:
        SqsTrigger:
          Type: SQS
          Properties:
            Enabled: !If [CreateSqsEventMapping, true, false]
            Queue: !GetAtt JobExecutionSqsQueue.Arn
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayerVersionArn
      MemorySize: 128
      Role: !GetAtt JobExecutionSqsQueueLambdaIamRole.Arn
      Runtime: nodejs12.x
      Tags:
        Project: Porter
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
      Timeout: 8
  JobExecutionSqsQueueLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${JobExecutionSqsQueueLambdaFunction}
      RetentionInDays: 30
  JobExecutionSqsQueueLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: '[Porter][SQS][Lambda] Elevated error volume'
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: >-
        Job execution function has encountered an invocation error
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref JobExecutionSqsQueueLambdaFunction
  # Transcode Job Watcher
  # Transcode tasks are submitted async, but the state machine will wait for a
  # task token to be sent back as part of a SendTaskSuccess or SendTaskFailure
  # call. The job watcher function is triggered by changes to transcribe jobs,
  # and sends the appropriate task result based on the result of the job, at
  # which point the execution of the state machine will proceed.
  TranscriptionJobStateChangeLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref ArtifactBucketReadOnlyAccessPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: StepFunctions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:SendTaskFailure
                  - states:SendTaskSuccess
                Resource:
                  - !Ref StateMachine
  TranscriptionJobStateChangeLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/TranscriptionJobStateChangeLambdaFunction/
      Description: Handles transcription job state change events
      Environment:
        Variables:
          ARTIFACT_BUCKET_NAME: !Ref ArtifactBucket
          TRANSCODE_JOB_NAME_PREFIX: !Ref TranscodeJobNamePrefix
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayerVersionArn
      MemorySize: 128
      Role: !GetAtt TranscriptionJobStateChangeLambdaIamRole.Arn
      Runtime: nodejs12.x
      Tags:
        Project: Porter
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
      Timeout: 4
  TranscriptionJobStateChangeLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${TranscriptionJobStateChangeLambdaFunction}
      RetentionInDays: 30
  TranscriptionJobStateChangeLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: '[Porter][Transcribe Change][Lambda] Elevated error volume'
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: >-
        Trascription job start function has encountered an invocation error
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: LambdaFunctionsFailed
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: LambdaFunctionArn
          Value: !GetAtt TranscriptionJobStateChangeLambdaFunction.Arn
  TranscriptionJobEventsRuleLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt TranscriptionJobStateChangeLambdaFunction.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt TranscriptionJobEventsRule.Arn
  TranscriptionJobEventsRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Monitors Amazon Transcribe for job state changes
      EventPattern: |
        {
          "source": [
            "aws.transcribe"
          ],
          "detail-type": [
            "Transcribe Job State Change"
          ],
          "detail": {
            "TranscriptionJobStatus": [
              "COMPLETED",
              "FAILED"
            ]
          }
        }
      State: ENABLED
      Targets:
        - Arn: !GetAtt TranscriptionJobStateChangeLambdaFunction.Arn
          Id: !Sub ${AWS::StackName}.Transcribe.JobState
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Project
          Value: Porter
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Project
          Value: Porter
        - Key: Name
          Value: !Sub ${AWS::StackName}-RouteTable
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  S3VpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref RouteTable
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcEndpointType: Gateway
      VpcId: !Ref VPC
  AwsServiceInterfaceEndpointsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow ECS traffic
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      Tags:
        - Key: Project
          Value: Porter
        - Key: Name
          Value: !Sub ${AWS::StackName}-EcsEndpointsSecurityGroup
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  EcrVpcEndpoint:
    # https://docs.aws.amazon.com/AmazonECR/latest/userguide/vpc-endpoints.html#ecr-vpc-endpoint-considerations
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref AwsServiceInterfaceEndpointsSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.dkr
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2
      VpcEndpointType: Interface
      VpcId: !Ref VPC
  EcrApiVpcEndpoint:
    # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html#platform-version-migration
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref AwsServiceInterfaceEndpointsSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.api
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2
      VpcEndpointType: Interface
      VpcId: !Ref VPC
  CloudWatchVpcEndpoint:
    # https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch-and-interface-VPC.html
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref AwsServiceInterfaceEndpointsSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.monitoring
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2
      VpcEndpointType: Interface
      VpcId: !Ref VPC
  CloudWatchLogsVpcEndpoint:
    # https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/cloudwatch-logs-and-interface-VPC.html
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref AwsServiceInterfaceEndpointsSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2
      VpcEndpointType: Interface
      VpcId: !Ref VPC
  StsVpcEndpoint:
    # https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_sts_vpce.html
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref AwsServiceInterfaceEndpointsSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.sts
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2
      VpcEndpointType: Interface
      VpcId: !Ref VPC
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: 10.0.0.0/17
      Tags:
        - Key: Project
          Value: Porter
        - Key: Name
          Value: !Sub ${AWS::StackName}-Subnet-1
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
      VpcId: !Ref VPC
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: 10.0.128.0/17
      Tags:
        - Key: Project
          Value: Porter
        - Key: Name
          Value: !Sub ${AWS::StackName}-Subnet-2
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
      VpcId: !Ref VPC
  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet1
  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet2
  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      Tags:
        - Key: Project
          Value: Porter
        - Key: Name
          Value: !Sub ${AWS::StackName}-NetworkAcl
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
      VpcId: !Ref VPC
  InboundTrafficNetworkAclEntry:
    # TODO This is only for debugging
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref NetworkAcl
      Protocol: -1 # All
      RuleAction: allow
      RuleNumber: 100
  OutboudTrafficNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref NetworkAcl
      Protocol: -1 # All
      RuleAction: allow
      RuleNumber: 100
  Subnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref NetworkAcl
      SubnetId: !Ref Subnet1
  Subnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref NetworkAcl
      SubnetId: !Ref Subnet2
  DhcpOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: ec2.internal
      DomainNameServers:
        - AmazonProvidedDNS
      Tags:
        - Key: Project
          Value: Porter
        - Key: Name
          Value: !Sub ${AWS::StackName}-DhcpOptions
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  DhcpOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      DhcpOptionsId: !Ref DhcpOptions
      VpcId: !Ref VPC
  # ECS Cluster
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  # Transcode ECS Service
  TranscodeEcsTaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
  TranscodeEcsTaskExecutionIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
      Description: String
      Policies:
        # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_execution_IAM_role.html#task-execution-ecr-conditionkeys
        # An alternative to the managed AmazonECSTaskExecutionRolePolicy, which
        # restrics access to a specific VPC and VPC endpoint
        - PolicyName: TaskExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Condition:
                  StringEquals:
                    aws:sourceVpce: !Ref EcrVpcEndpoint
                    aws:sourceVpc: !Ref VPC
                Resource:
                  - '*'
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  TranscodeEcsTaskIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
      Policies:
        # Allow it to put CloudWatch Metrics
        - PolicyName: PutCloudWatchMetric
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource:
                  - '*'
      ManagedPolicyArns:
        # Transcode operations are always pulling FROM the artifact bucket
        - !Ref ArtifactBucketReadOnlyAccessPolicy
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  TranscodeEcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: !Ref TranscodeEcsTaskDefinitionImage
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref TranscodeEcsTaskLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Name: !Sub ${AWS::StackName}-transcode-container
      Cpu: '4096'
      ExecutionRoleArn: !GetAtt TranscodeEcsTaskExecutionIamRole.Arn
      Memory: '8192'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
      TaskRoleArn: !GetAtt TranscodeEcsTaskIamRole.Arn
  # Artifact Bucket
  ArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 1
            Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  # Lambda Layers
  WavefileLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: makefile
    Properties:
      Description: wavefile NPM module
      ContentUri: layers/wavefile
      CompatibleRuntimes:
        - nodejs12.x
  # Normalize Input Lambda
  NormalizeInputLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  NormalizeInputLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/NormalizeInputLambdaFunction/
      Description: >-
        Normalizes Porter job input
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayerVersionArn
      MemorySize: 128
      Role: !GetAtt NormalizeInputLambdaIamRole.Arn
      Runtime: nodejs12.x
      Tags:
        Project: Porter
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
      Timeout: 4
      Tracing: Active
  NormalizeInputLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${NormalizeInputLambdaFunction}
      RetentionInDays: 30
  NormalizeInputLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: '[Porter][Normalize][Lambda] Elevated error volume'
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: >-
        Normalize function has encountered an invocation error
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: LambdaFunctionsFailed
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: LambdaFunctionArn
          Value: !GetAtt NormalizeInputLambdaFunction.Arn
  # Ingest Lambda
  IngestLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        # For uploading files and file parts to the artifact store
        - !Ref ArtifactBucketWriteAccessPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        # Allow GET-only access to any object in S3
        - PolicyName: S3CopySourcePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject*
                Resource:
                  - '*'
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  IngestLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/IngestLambdaFunction/
      Description: >-
        Ingests a source file to a predefined S3 artifact bucket
      Environment:
        Variables:
          ARTIFACT_BUCKET_NAME: !Ref ArtifactBucket
          MAX_HTTP_REDIRECTS: '10'
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayerVersionArn
      MemorySize: 512
      Role: !GetAtt IngestLambdaIamRole.Arn
      Runtime: nodejs12.x
      Tags:
        Project: Porter
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
      Timeout: 90
      Tracing: Active
  IngestLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${IngestLambdaFunction}
      RetentionInDays: 30
  IngestLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: '[Porter][Ingest][Lambda] Elevated error volume'
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: >-
        Ingest function has encountered an invocation error
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: LambdaFunctionsFailed
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: LambdaFunctionArn
          Value: !GetAtt IngestLambdaFunction.Arn
  # Source Type Lambda
  SourceTypeLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref ArtifactBucketReadOnlyAccessPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  SourceTypeLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/SourceTypeLambdaFunction/
      Description: >-
        Detect the file type of the source fiel
      Environment:
        Variables:
          ARTIFACT_BUCKET_NAME: !Ref ArtifactBucket
          MAX_HTTP_REDIRECTS: '10'
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayerVersionArn
        - !Ref NpmFileTypeLambdaLayerVersionArn
      MemorySize: 256
      Role: !GetAtt SourceTypeLambdaIamRole.Arn
      Runtime: nodejs12.x
      Tags:
        Project: Porter
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
      Timeout: 8
      Tracing: Active
  SourceTypeLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${SourceTypeLambdaFunction}
      RetentionInDays: 30
  SourceTypeLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: '[Porter][Type][Lambda] Elevated error volume'
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: >-
        Source type function has encountered an invocation error
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: LambdaFunctionsFailed
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: LambdaFunctionArn
          Value: !GetAtt SourceTypeLambdaFunction.Arn
  # Inspect Lambda
  InspectMediaLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref ArtifactBucketReadOnlyAccessPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  InspectMediaLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/InspectMediaLambdaFunction/
      Description: >-
        Inspects (ffprobe, etc) the source file
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayerVersionArn
        - !Ref FfmpegLambdaLayerVersionArn
        - !Ref MpckLambdaLayerVersionArn
        - !Ref NpmSharpLambdaLayerVersionArn
      MemorySize: 512
      Role: !GetAtt InspectMediaLambdaIamRole.Arn
      Runtime: nodejs10.x
      Tags:
        Project: Porter
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
      Timeout: 64
      Tracing: Active
  InspectMediaLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${InspectMediaLambdaFunction}
      RetentionInDays: 30
  InspectMediaLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: '[Porter][Inspect][Lambda] Elevated error volume'
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: >-
        Inspect media function has encountered an invocation error
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: LambdaFunctionsFailed
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: LambdaFunctionArn
          Value: !GetAtt InspectMediaLambdaFunction.Arn
  # Copy Lambda
  CopyLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        # Copy operations are always copying FROM the artifact bucket
        - !Ref ArtifactBucketReadOnlyAccessPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  CopyLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/CopyLambdaFunction/
      Description: >-
        Copies an object in S3 to another location in S3
      Environment:
        Variables:
          S3_DESTINATION_WRITER_ROLE: !GetAtt S3DestinationWriterRole.Arn
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayerVersionArn
      MemorySize: 512
      Role: !GetAtt CopyLambdaIamRole.Arn
      Runtime: nodejs12.x
      Tags:
        Project: Porter
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
      Timeout: 32
      Tracing: Active
  CopyLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${CopyLambdaFunction}
      RetentionInDays: 30
  CopyLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: '[Porter][Copy][Lambda] Elevated error volume'
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: >-
        Copy function has encountered an invocation error
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: LambdaFunctionsFailed
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: LambdaFunctionArn
          Value: !GetAtt CopyLambdaFunction.Arn
  # Transcode Input Lambda
  TranscodeTaskInputLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  TranscodeTaskInputLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/TranscodeTaskInputLambdaFunction/
      Description: >-
        Prepares state input for the transcode task by converting some data to
        JSON strings
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayerVersionArn
      MemorySize: 128
      Role: !GetAtt TranscodeTaskInputLambdaIamRole.Arn
      Runtime: nodejs12.x
      Tags:
        Project: Porter
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
      Timeout: 4
      Tracing: Active
  TranscodeTaskInputLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${TranscodeTaskInputLambdaFunction}
      RetentionInDays: 30
  TranscodeTaskInputLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: '[Porter][Transcode Input][Lambda] Elevated error volume'
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: >-
        Transcode input format function has encountered an invocation error
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: LambdaFunctionsFailed
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: LambdaFunctionArn
          Value: !GetAtt TranscodeTaskInputLambdaFunction.Arn
  # Transcode Output Lambda
  TranscodeTaskOutputLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  TranscodeTaskOutputLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/TranscodeTaskOutputLambdaFunction/
      Description: >-
        Formats the output of a transcode task result
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayerVersionArn
      MemorySize: 128
      Role: !GetAtt TranscodeTaskOutputLambdaIamRole.Arn
      Runtime: nodejs12.x
      Tags:
        Project: Porter
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
      Timeout: 4
      Tracing: Active
  TranscodeTaskOutputLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${TranscodeTaskOutputLambdaFunction}
      RetentionInDays: 30
  TranscodeTaskOutputLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: '[Porter][Transcode][Lambda] Elevated error volume'
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: >-
        Transcode output format function has encountered an invocation error
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: LambdaFunctionsFailed
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: LambdaFunctionArn
          Value: !GetAtt TranscodeTaskOutputLambdaFunction.Arn
  # Image Manipulation Lambda
  ImageTransformLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        # Image operations are always fetching from the artifact bucket
        - !Ref ArtifactBucketReadOnlyAccessPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  ImageTransformLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/ImageTransformLambdaFunction/
      Description: >-
        Performs image manipulation operations on a source file
      Environment:
        Variables:
          S3_DESTINATION_WRITER_ROLE: !GetAtt S3DestinationWriterRole.Arn
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayerVersionArn
        - !Ref NpmSharpLambdaLayerVersionArn
      MemorySize: 1024
      Role: !GetAtt ImageTransformLambdaIamRole.Arn
      Runtime: nodejs10.x
      Tags:
        Project: Porter
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
      Timeout: 16
      Tracing: Active
  ImageTransformLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ImageTransformLambdaFunction}
      RetentionInDays: 30
  ImageTransformLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: '[Porter][Image][Lambda] Elevated error volume'
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: >-
        Image transform function has encountered an invocation error
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: LambdaFunctionsFailed
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: LambdaFunctionArn
          Value: !GetAtt ImageTransformLambdaFunction.Arn
  # WAV Wrap Lambda
  WavWrapLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref ArtifactBucketReadOnlyAccessPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  WavWrapLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/WavWrapLambdaFunction/
      Description: >-
        WAV wrap a source audio file
      Environment:
        Variables:
          S3_DESTINATION_WRITER_ROLE: !GetAtt S3DestinationWriterRole.Arn
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayerVersionArn
        - !Ref WavefileLambdaLayer
      MemorySize: 3008
      Role: !GetAtt WavWrapLambdaIamRole.Arn
      Runtime: nodejs12.x
      Tags:
        Project: Porter
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
      Timeout: 900
      Tracing: Active
  WavWrapLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${WavWrapLambdaFunction}
      RetentionInDays: 30
  WavWrapLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: '[Porter][WAV][Lambda] Elevated error volume'
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: >-
        WAV wrap function has encountered an invocation error
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: LambdaFunctionsFailed
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: LambdaFunctionArn
          Value: !GetAtt WavWrapLambdaFunction.Arn
  # Transcribe Start Lambda
  TranscriptionJobStartLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref ArtifactBucketReadOnlyAccessPolicy
        # For uploading files and file parts to the artifact store
        - !Ref ArtifactBucketWriteAccessPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        # TODO Need to make sure the ArtifactBucketWriteAccessPolicy policy
        # is enough for Transcribe to work
        # - PolicyName: ArtifactBucketWriteAccess
        #   PolicyDocument:
        #     Version: "2012-10-17"
        #     Statement:
        #       - Effect: Allow
        #         Action:
        #           - s3:Get*
        #           - s3:Put*
        #         Resource:
        #           - !Sub ${ArtifactBucket.Arn}/*
        - PolicyName: TranscribeJobStartPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - transcribe:GetTranscriptionJob
                  - transcribe:StartTranscriptionJob
                Effect: Allow
                Resource:
                  - '*'
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  TranscriptionJobStartLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/TranscriptionJobStartLambdaFunction/
      Description: >-
        Starts a transcription job for an artifact file
      Environment:
        Variables:
          ARTIFACT_BUCKET_NAME: !Ref ArtifactBucket
          TRANSCODE_JOB_NAME_PREFIX: !Ref TranscodeJobNamePrefix
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayerVersionArn
      MemorySize: 128
      Role: !GetAtt TranscriptionJobStartLambdaIamRole.Arn
      Runtime: nodejs12.x
      Tags:
        Project: Porter
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
      Timeout: 4
      Tracing: Active
  TranscriptionJobStartLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${TranscriptionJobStartLambdaFunction}
      RetentionInDays: 30
  TranscriptionJobStartLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: '[Porter][Transcribe Start][Lambda] Elevated error volume'
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: >-
        Trascription job start function has encountered an invocation error
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: LambdaFunctionsFailed
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: LambdaFunctionArn
          Value: !GetAtt TranscriptionJobStartLambdaIamRole.Arn
  # Transcribe Job Results Lambda
  TranscriptionJobResultsLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        # Copy operations are always copying FROM the artifact bucket
        - !Ref ArtifactBucketReadOnlyAccessPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: TranscribeJobReadPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - transcribe:GetTranscriptionJob
                Effect: Allow
                Resource:
                  - '*'
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  TranscriptionJobResultsLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/TranscriptionJobResultsLambdaFunction/
      Description: >-
        Gets the results of a transcribe job and generates task state output
      Environment:
        Variables:
          S3_DESTINATION_WRITER_ROLE: !GetAtt S3DestinationWriterRole.Arn
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayerVersionArn
      MemorySize: 512
      Role: !GetAtt TranscriptionJobResultsLambdaIamRole.Arn
      Runtime: nodejs12.x
      Tags:
        Project: Porter
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
      Timeout: 8
      Tracing: Active
  TranscriptionJobResultsLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${TranscriptionJobResultsLambdaFunction}
      RetentionInDays: 30
  TranscriptionJobResultsLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: '[Porter][Transcribe Result][Lambda] Elevated error volume'
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: >-
        Trascription job results function has encountered an invocation error
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: LambdaFunctionsFailed
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: LambdaFunctionArn
          Value: !GetAtt TranscriptionJobResultsLambdaIamRole.Arn
  # Callback Lambda
  CallbackLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        # Must be able to publish to whatever SNS topics are defined by a job
        - PolicyName: SnsPublish
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource:
                  - '*'
        # Must be able to publish to whatever SQS queues are defined by a job
        - PolicyName: SqsSendMessage
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource:
                  - '*'
        # Allow it to put CloudWatch Metrics
        - PolicyName: PutCloudWatchMetric
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource:
                  - '*'
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  CallbackLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/CallbackLambdaFunction/
      Description: >-
        Sends a job or task callback message to a single endpoint
      Environment:
        Variables:
          MAX_HTTP_REDIRECTS: '3'
          S3_DESTINATION_WRITER_ROLE: !GetAtt S3DestinationWriterRole.Arn
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayerVersionArn
      MemorySize: 128
      Role: !GetAtt CallbackLambdaIamRole.Arn
      Runtime: nodejs12.x
      Tags:
        Project: Porter
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
      Timeout: 4
      Tracing: Active
  CallbackLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${CallbackLambdaFunction}
      RetentionInDays: 30
  CallbackLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: '[Porter][Callback][Lambda] Elevated error volume'
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: >-
        Callback function has encountered an invocation error
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: LambdaFunctionsFailed
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: LambdaFunctionArn
          Value: !GetAtt CallbackLambdaFunction.Arn
  CallbackLambdaErrorMessageSentAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: '[Porter][Callback][Message] Elevated error message volume'
      AlarmActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      OKActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      AlarmDescription: >-
        An error message callback was sent. The callback executed successfully,
        but the message indicates that a state failed.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: ErrorCallbackMessagesSent
      Namespace: PRX/Porter
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: LambdaFunctionName
          Value: !Ref CallbackLambdaFunction
  # Job Serializer Lambda
  JobSerializerLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: SnsPublishJobExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Ref JobExecutionSnsTopic
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  JobSerializerLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/JobSerializerLambdaFunction/
      Description: >-
        Serialized Porter jobs
      Environment:
        Variables:
          JOB_EXECUTION_SNS_TOPIC_ARN: !Ref JobExecutionSnsTopic
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayerVersionArn
      MemorySize: 128
      Role: !GetAtt JobSerializerLambdaIamRole.Arn
      Runtime: nodejs12.x
      Tags:
        Project: Porter
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
      Timeout: 4
      Tracing: Active
  JobSerializerLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${JobSerializerLambdaFunction}
      RetentionInDays: 30
  JobSerializerLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: '[Porter][Serialize][Lambda] Elevated error volume'
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: >-
        Job serializer function has encountered an invocation error
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: LambdaFunctionsFailed
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: LambdaFunctionArn
          Value: !GetAtt JobSerializerLambdaFunction.Arn
  # Normalize Output Lambda
  NormalizeOutputLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  NormalizeOutputLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/NormalizeOutputLambdaFunction/
      Description: >-
        Normalizes Porter job output
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayerVersionArn
      MemorySize: 128
      Role: !GetAtt NormalizeOutputLambdaIamRole.Arn
      Runtime: nodejs12.x
      Tags:
        Project: Porter
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
      Timeout: 4
      Tracing: Active
  NormalizeOutputLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${NormalizeOutputLambdaFunction}
      RetentionInDays: 30
  NormalizeOutputLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: '[Porter][Normalize Out][Lambda] Elevated error volume'
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: >-
        Normalize function has encountered an invocation error
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: LambdaFunctionsFailed
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: LambdaFunctionArn
          Value: !GetAtt NormalizeOutputLambdaFunction.Arn
  # Step Functions
  StateMachineIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: LambdaTaskPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt NormalizeInputLambdaFunction.Arn
                  - !GetAtt IngestLambdaFunction.Arn
                  - !GetAtt SourceTypeLambdaFunction.Arn
                  - !GetAtt CopyLambdaFunction.Arn
                  - !GetAtt ImageTransformLambdaFunction.Arn
                  - !GetAtt WavWrapLambdaFunction.Arn
                  - !GetAtt InspectMediaLambdaFunction.Arn
                  - !GetAtt TranscriptionJobStartLambdaFunction.Arn
                  - !GetAtt TranscriptionJobResultsLambdaFunction.Arn
                  - !GetAtt CallbackLambdaFunction.Arn
                  - !GetAtt TranscodeTaskInputLambdaFunction.Arn
                  - !GetAtt TranscodeTaskOutputLambdaFunction.Arn
                  - !GetAtt NormalizeOutputLambdaFunction.Arn
                  - !GetAtt JobSerializerLambdaFunction.Arn
        - PolicyName: PassRoleToEcsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !GetAtt TranscodeEcsTaskExecutionIamRole.Arn
                  - !GetAtt TranscodeEcsTaskIamRole.Arn
        # https://docs.aws.amazon.com/step-functions/latest/dg/ecs-iam.html
        - PolicyName: EcsSyncStaticResourcesPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:RunTask
                Resource:
                  - !Ref TranscodeEcsTaskDefinition
              - Effect: Allow
                Action:
                  - ecs:StopTask
                  - ecs:DescribeTasks
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - events:PutTargets
                  - events:PutRule
                  - events:DescribeRule
                Resource:
                  - !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForECSTaskRule
        # https://docs.aws.amazon.com/step-functions/latest/dg/ecs-iam.html
        - PolicyName: EcsSyncDynamicResourcesPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:RunTask
                  - ecs:StopTask
                  - ecs:DescribeTasks
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - events:PutTargets
                  - events:PutRule
                  - events:DescribeRule
                Resource:
                  - !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForECSTaskRule
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  StateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionSubstitutions:
        AwsPartition: !Ref AWS::Partition
        AwsRegion: !Ref AWS::Region
        CallbackLambdaFunctionArn: !GetAtt CallbackLambdaFunction.Arn
        CopyLambdaFunctionArn: !GetAtt CopyLambdaFunction.Arn
        EcsClusterArn: !GetAtt EcsCluster.Arn
        ImageTransformLambdaFunctionArn: !GetAtt ImageTransformLambdaFunction.Arn
        IngestLambdaFunctionArn: !GetAtt IngestLambdaFunction.Arn
        InspectMediaLambdaFunctionArn: !GetAtt InspectMediaLambdaFunction.Arn
        JobSerializerLambdaFunctionArn: !GetAtt JobSerializerLambdaFunction.Arn
        NormalizeInputLambdaFunctionArn: !GetAtt NormalizeInputLambdaFunction.Arn
        NormalizeOutputLambdaFunctionArn: !GetAtt NormalizeOutputLambdaFunction.Arn
        S3DestinationWriterRoleArn: !GetAtt S3DestinationWriterRole.Arn
        SourceTypeLambdaFunctionArn: !GetAtt SourceTypeLambdaFunction.Arn
        TranscodeContainerName: !Sub ${AWS::StackName}-transcode-container
        TranscodeEcsTaskDefinitionArn: !Ref TranscodeEcsTaskDefinition
        TranscodeTaskInputLambdaFunctionArn: !GetAtt TranscodeTaskInputLambdaFunction.Arn
        TranscodeTaskOutputLambdaFunctionArn: !GetAtt TranscodeTaskOutputLambdaFunction.Arn
        TranscriptionJobResultsLambdaFunctionArn: !GetAtt TranscriptionJobResultsLambdaFunction.Arn
        TranscriptionJobStartLambdaFunctionArn: !GetAtt TranscriptionJobStartLambdaFunction.Arn
        VpcSubnet1: !Ref Subnet1
        VpcSubnet2: !Ref Subnet2
        WavWrapLambdaFunctionArn: !GetAtt WavWrapLambdaFunction.Arn
      DefinitionUri: state-machine.asl.json
      Role: !GetAtt StateMachineIamRole.Arn
      Tags:
        Project: Porter
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
  StateMachineTimedOutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmName: !Sub '[Porter][States] Experiencing time outs (${AWS::StackName})'
      AlarmActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      OKActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      AlarmDescription: >-
        Porter state machine has experienced execution time outs
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: ExecutionsTimedOut
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref StateMachine
  StateMachineThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmName: !Sub '[Porter][States] Events being throttled (${AWS::StackName})'
      AlarmActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      OKActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      AlarmDescription: >-
        Porter state machine is being throttled
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: ExecutionThrottled
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref StateMachine
  StateMachineFailureAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmName: !Sub '[Porter][States] Experiencing failures (${AWS::StackName})'
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: >-
        Porter state machine experienced uncaught errors
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: ExecutionsFailed
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref StateMachine
Outputs:
  JobExecutionSnsTopicArn:
    Value: !Ref JobExecutionSnsTopic
  JobExecutionSqsQueueArn:
    Value: !GetAtt JobExecutionSqsQueue.Arn
  JobExecutionSqsQueueUrl:
    Value: !Ref JobExecutionSqsQueue
  S3DestinationWriterRoleArn:
    Value: !GetAtt S3DestinationWriterRole.Arn
