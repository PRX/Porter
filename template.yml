# porter.yml
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >-
  Creates a Step Function state machine for processing user created content, as
  well as some supporting resources
Conditions:
  CreateProductionResources: !Equals [!Ref EnvironmentType, Production]
  CreateSqsEventMapping: !Equals [!Ref EnableSqsJobExecution, "True"]
Parameters:
  EnvironmentType:
    Type: String
    AllowedValues:
      - Staging
      - Production
  TranscodeJobNamePrefix:
    Type: String
  OpsWarnMessagesSnsTopicArn:
    Type: String
  OpsErrorMessagesSnsTopicArn:
    Type: String
  AwsXraySdkLambdaLayerVersionArn:
    Type: String
  FfmpegLambdaLayerVersionArn:
    Type: String
  MpckLambdaLayerVersionArn:
    Type: String
  NpmSharpLambdaLayerVersionArn:
    Type: String
  NpmFileTypeLambdaLayerVersionArn:
    Type: String
  TranscodeEcsTaskDefinitionImage:
    Type: String
  EnableSqsJobExecution:
    Type: String
    AllowedValues:
      - "True"
      - "False"
Resources:
  # Managed IAM Policies
  ArtifactBucketReadOnlyAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: >-
        Provides read-only access to the artifact bucket for a particular
        Porter deployment
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - s3:GetObject*
            Effect: Allow
            Resource:
              - !Sub arn:aws:s3:::${ArtifactBucket}/*
  ArtifactBucketWriteAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: >-
        Provides limitedS S3 list and write access to the artifact bucket for a
        particular Porter deployment
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:ListBucketMultipartUploads
            Resource:
              - !Sub arn:aws:s3:::${ArtifactBucket}
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:AbortMultipartUpload
              - s3:ListMultipartUploadParts
            Resource:
              - !Sub arn:aws:s3:::${ArtifactBucket}/*
  # General-Purpose IAM Roles
  S3DestinationWriterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            - Action:
                - sts:AssumeRole
              Effect: Allow
              Principal:
                AWS:
                  - !GetAtt CopyLambdaIamRole.Arn
                  - !GetAtt ImageTransformLambdaIamRole.Arn
                  - !GetAtt TranscriptionJobResultsLambdaIamRole.Arn
                  - !GetAtt CallbackLambdaIamRole.Arn
                  - !GetAtt TranscodeEcsTaskIamRole.Arn
      ManagedPolicyArns:
        # Calls to s3.copyObject need read access to the artifact bucket
        - !Ref ArtifactBucketReadOnlyAccessPolicy
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  # SNS
  ## Messages sent to this topic will be handled by a Lambda function which
  ## executes the Step Functions state machine. The `input` to the state machine
  ## execution will be the body of the SNS message. The SNS message must be
  ## valic JSON.
  JobExecutionSnsTopic:
    Type: AWS::SNS::Topic
  JobExecutionSnsTopicLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: StepFunctionsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource:
                  - !Ref StateMachine
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  JobExecutionSnsTopicLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/JobExecutionSnsTopicLambdaFunction/
      Description: >-
        Relays SNS messages sent to a subscribed topic to a State Machine
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref StateMachine
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayerVersionArn
      MemorySize: 128
      Role: !GetAtt JobExecutionSnsTopicLambdaIamRole.Arn
      Runtime: nodejs12.x
      Tags:
        Project: Porter
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
      Timeout: 8
  JobExecutionSnsTopicLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt JobExecutionSnsTopicLambdaFunction.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref JobExecutionSnsTopic
  JobExecutionSnsTopicLambdaSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt JobExecutionSnsTopicLambdaFunction.Arn
      Protocol: lambda
      TopicArn: !Ref JobExecutionSnsTopic
  JobExecutionSnsTopicLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: "[Porter][SNS][Lambda] Elevated error volume"
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: >-
        Job execution function has encountered an invocation error
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref JobExecutionSnsTopicLambdaFunction
  # SQS
  ## Messages sent to this queue will be handled by a Lambda function which
  ## executes the Step Functions state machine. The `input` to the state machine
  ## execution will be the body of the SQS message. The SQS message must be
  ## valic JSON.
  JobExecutionSqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  JobExecutionSqsQueueLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: SqsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ChangeMessageVisibility
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ReceiveMessage
                Resource:
                  - !GetAtt JobExecutionSqsQueue.Arn
        - PolicyName: StepFunctionsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource:
                  - !Ref StateMachine
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  JobExecutionSqsQueueLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/JobExecutionSqsQueueLambdaFunction/
      Description: >-
        Relays SQS messages sent to a subscribed queue to a State Machine
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref StateMachine
      Events:
        SqsTrigger:
          Type: SQS
          Properties:
            Enabled: !If [CreateSqsEventMapping, true, false]
            Queue: !GetAtt JobExecutionSqsQueue.Arn
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayerVersionArn
      MemorySize: 128
      Role: !GetAtt JobExecutionSqsQueueLambdaIamRole.Arn
      Runtime: nodejs12.x
      Tags:
        Project: Porter
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
      Timeout: 8
  JobExecutionSqsQueueLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: "[Porter][SQS][Lambda] Elevated error volume"
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: >-
        Job execution function has encountered an invocation error
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref JobExecutionSqsQueueLambdaFunction
  # Transcode Job Watcher
  # Transcode tasks are submitted async, but the state machine will wait for a
  # task token to be sent back as part of a SendTaskSuccess or SendTaskFailure
  # call. The job watcher function is triggered by changes to transcribe jobs,
  # and sends the appropriate task result based on the result of the job, at
  # which point the execution of the state machine will proceed.
  TranscriptionJobStateChangeLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref ArtifactBucketReadOnlyAccessPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: StepFunctions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - states:SendTaskFailure
                  - states:SendTaskSuccess
                Resource:
                  - !Ref StateMachine
  TranscriptionJobStateChangeLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/TranscriptionJobStateChangeLambdaFunction/
      Description: Handles transcription job state change events
      Environment:
        Variables:
          ARTIFACT_BUCKET_NAME: !Ref ArtifactBucket
          TRANSCODE_JOB_NAME_PREFIX: !Ref TranscodeJobNamePrefix
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayerVersionArn
      MemorySize: 128
      Role: !GetAtt TranscriptionJobStateChangeLambdaIamRole.Arn
      Runtime: nodejs12.x
      Tags:
        Project: Porter
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
      Timeout: 4
  TranscriptionJobStateChangeLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: "[Porter][Transcribe Change][Lambda] Elevated error volume"
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: >-
        Trascription job start function has encountered an invocation error
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: LambdaFunctionsFailed
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref TranscriptionJobStateChangeLambdaFunction
  TranscriptionJobEventsRuleLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt TranscriptionJobStateChangeLambdaFunction.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt TranscriptionJobEventsRule.Arn
  TranscriptionJobEventsRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Monitors Amazon Transcribe for job state changes
      EventPattern: |
        {
          "source": [
            "aws.transcribe"
          ],
          "detail-type": [
            "Transcribe Job State Change"
          ],
          "detail": {
            "TranscriptionJobStatus": [
              "COMPLETED",
              "FAILED"
            ]
          }
        }
      State: ENABLED
      Targets:
        - Arn: !GetAtt TranscriptionJobStateChangeLambdaFunction.Arn
          Id: !Sub ${AWS::StackName}.Transcribe.JobState
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Project
          Value: Porter
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Project
          Value: Porter
        - Key: Name
          Value: !Sub ${AWS::StackName}-RouteTable
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  S3VpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref RouteTable
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcEndpointType: Gateway
      VpcId: !Ref VPC
  AwsServiceInterfaceEndpointsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow ECS traffic
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      Tags:
        - Key: Project
          Value: Porter
        - Key: Name
          Value: !Sub ${AWS::StackName}-EcsEndpointsSecurityGroup
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  EcrVpcEndpoint:
    # https://docs.aws.amazon.com/AmazonECR/latest/userguide/vpc-endpoints.html#ecr-vpc-endpoint-considerations
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref AwsServiceInterfaceEndpointsSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.dkr
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2
      VpcEndpointType: Interface
      VpcId: !Ref VPC
  CloudWatchLogsVpcEndpoint:
    # https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/cloudwatch-logs-and-interface-VPC.html
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref AwsServiceInterfaceEndpointsSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2
      VpcEndpointType: Interface
      VpcId: !Ref VPC
  StsVpcEndpoint:
    # https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_sts_vpce.html
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref AwsServiceInterfaceEndpointsSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.sts
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2
      VpcEndpointType: Interface
      VpcId: !Ref VPC
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: 10.0.0.0/17
      Tags:
        - Key: Project
          Value: Porter
        - Key: Name
          Value: !Sub ${AWS::StackName}-Subnet-1
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
      VpcId: !Ref VPC
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: 10.0.128.0/17
      Tags:
        - Key: Project
          Value: Porter
        - Key: Name
          Value: !Sub ${AWS::StackName}-Subnet-2
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
      VpcId: !Ref VPC
  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet1
  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet2
  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      Tags:
        - Key: Project
          Value: Porter
        - Key: Name
          Value: !Sub ${AWS::StackName}-NetworkAcl
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
      VpcId: !Ref VPC
  InboundTrafficNetworkAclEntry:
    # TODO This is only for debugging
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref NetworkAcl
      Protocol: -1 # All
      RuleAction : allow
      RuleNumber : 100
  OutboudTrafficNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref NetworkAcl
      Protocol: -1 # All
      RuleAction : allow
      RuleNumber : 100
  Subnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref NetworkAcl
      SubnetId: !Ref Subnet1
  Subnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref NetworkAcl
      SubnetId: !Ref Subnet2
  DhcpOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: ec2.internal
      DomainNameServers:
        - AmazonProvidedDNS
      Tags:
        - Key: Project
          Value: Porter
        - Key: Name
          Value: !Sub ${AWS::StackName}-DhcpOptions
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  DhcpOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      DhcpOptionsId: !Ref DhcpOptions
      VpcId: !Ref VPC
  # ECS Cluster
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  # Transcode ECS Service
  TranscodeEcsTaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
  TranscodeEcsTaskExecutionIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
      Description: String
      Policies:
        # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_execution_IAM_role.html#task-execution-ecr-conditionkeys
        # An alternative to the managed AmazonECSTaskExecutionRolePolicy, which
        # restrics access to a specific VPC and VPC endpoint
        - PolicyName: TaskExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Condition:
                  StringEquals:
                    aws:sourceVpce: !Ref EcrVpcEndpoint
                    aws:sourceVpc: !Ref VPC
                Resource:
                  - "*"
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  TranscodeEcsTaskIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        # Transcode operations are always pulling FROM the artifact bucket
        - !Ref ArtifactBucketReadOnlyAccessPolicy
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  TranscodeEcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: !Ref TranscodeEcsTaskDefinitionImage
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref TranscodeEcsTaskLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Name: !Sub ${AWS::StackName}-transcode-container
      Cpu: "4096"
      ExecutionRoleArn: !GetAtt TranscodeEcsTaskExecutionIamRole.Arn
      Memory: "8192"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
      TaskRoleArn: !GetAtt TranscodeEcsTaskIamRole.Arn
  # Artifact Bucket
  ArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 1
            Status: Enabled
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  # Normalize Input Lambda
  NormalizeInputLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  NormalizeInputLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/NormalizeInputLambdaFunction/
      Description: >-
        Normalizes Porter job input
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayerVersionArn
      MemorySize: 128
      Role: !GetAtt NormalizeInputLambdaIamRole.Arn
      Runtime: nodejs12.x
      Tags:
        Project: Porter
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
      Timeout: 4
      Tracing: Active
  NormalizeInputLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: "[Porter][Normalize][Lambda] Elevated error volume"
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: >-
        Normalize function has encountered an invocation error
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: LambdaFunctionsFailed
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref NormalizeInputLambdaFunction
  # Ingest Lambda
  IngestLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
      ManagedPolicyArns:
        # For uploading files and file parts to the artifact store
        - !Ref ArtifactBucketWriteAccessPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        # Allow GET-only access to any object in S3
        - PolicyName: S3CopySourcePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject*
                Resource:
                  - "*"
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  IngestLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/IngestLambdaFunction/
      Description: >-
        Ingests a source file to a predefined S3 artifact bucket
      Environment:
        Variables:
          ARTIFACT_BUCKET_NAME: !Ref ArtifactBucket
          MAX_HTTP_REDIRECTS: "10"
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayerVersionArn
      MemorySize: 512
      Role: !GetAtt IngestLambdaIamRole.Arn
      Runtime: nodejs12.x
      Tags:
        Project: Porter
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
      Timeout: 90
      Tracing: Active
  IngestLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: "[Porter][Ingest][Lambda] Elevated error volume"
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: >-
        Ingest function has encountered an invocation error
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: LambdaFunctionsFailed
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref IngestLambdaFunction
  # Source Type Lambda
  SourceTypeLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref ArtifactBucketReadOnlyAccessPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  SourceTypeLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/SourceTypeLambdaFunction/
      Description: >-
        Detect the file type of the source fiel
      Environment:
        Variables:
          ARTIFACT_BUCKET_NAME: !Ref ArtifactBucket
          MAX_HTTP_REDIRECTS: "10"
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayerVersionArn
        - !Ref NpmFileTypeLambdaLayerVersionArn
      MemorySize: 256
      Role: !GetAtt SourceTypeLambdaIamRole.Arn
      Runtime: nodejs12.x
      Tags:
        Project: Porter
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
      Timeout: 8
      Tracing: Active
  SourceTypeLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: "[Porter][Type][Lambda] Elevated error volume"
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: >-
        Source type function has encountered an invocation error
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: LambdaFunctionsFailed
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref SourceTypeLambdaFunction
  # Inspect Lambda
  InspectMediaLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref ArtifactBucketReadOnlyAccessPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  InspectMediaLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/InspectMediaLambdaFunction/
      Description: >-
        Inspects (ffprobe, etc) the source file
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayerVersionArn
        - !Ref FfmpegLambdaLayerVersionArn
        - !Ref MpckLambdaLayerVersionArn
        - !Ref NpmSharpLambdaLayerVersionArn
      MemorySize: 512
      Role: !GetAtt InspectMediaLambdaIamRole.Arn
      Runtime: nodejs10.x
      Tags:
        Project: Porter
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
      Timeout: 64
      Tracing: Active
  InspectMediaLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: "[Porter][Inspect][Lambda] Elevated error volume"
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: >-
        Inspect media function has encountered an invocation error
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: LambdaFunctionsFailed
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref InspectMediaLambdaFunction
  # Copy Lambda
  CopyLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
      ManagedPolicyArns:
        # Copy operations are always copying FROM the artifact bucket
        - !Ref ArtifactBucketReadOnlyAccessPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  CopyLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/CopyLambdaFunction/
      Description: >-
        Copies an object in S3 to another location in S3
      Environment:
        Variables:
          S3_DESTINATION_WRITER_ROLE: !GetAtt S3DestinationWriterRole.Arn
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayerVersionArn
      MemorySize: 512
      Role: !GetAtt CopyLambdaIamRole.Arn
      Runtime: nodejs12.x
      Tags:
        Project: Porter
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
      Timeout: 32
      Tracing: Active
  CopyLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: "[Porter][Copy][Lambda] Elevated error volume"
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: >-
        Copy function has encountered an invocation error
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: LambdaFunctionsFailed
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref CopyLambdaFunction
  # Transcode Output Lambda
  TranscodeTaskOutputLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  TranscodeTaskOutputLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/TranscodeTaskOutputLambdaFunction/
      Description: >-
        Formats the output of a transcode task result
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayerVersionArn
      MemorySize: 128
      Role: !GetAtt TranscodeTaskOutputLambdaIamRole.Arn
      Runtime: nodejs12.x
      Tags:
        Project: Porter
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
      Timeout: 4
      Tracing: Active
  TranscodeTaskOutputLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: "[Porter][Transcode][Lambda] Elevated error volume"
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: >-
        Transcode output format function has encountered an invocation error
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: LambdaFunctionsFailed
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref CopyLambdaFunction
  # Image Manipulation Lambda
  ImageTransformLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
      ManagedPolicyArns:
        # Image operations are always fetching from the artifact bucket
        - !Ref ArtifactBucketReadOnlyAccessPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  ImageTransformLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/ImageTransformLambdaFunction/
      Description: >-
        Performans image manipulation operations on a source file
      Environment:
        Variables:
          S3_DESTINATION_WRITER_ROLE: !GetAtt S3DestinationWriterRole.Arn
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayerVersionArn
        - !Ref NpmSharpLambdaLayerVersionArn
      MemorySize: 1024
      Role: !GetAtt ImageTransformLambdaIamRole.Arn
      Runtime: nodejs10.x
      Tags:
        Project: Porter
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
      Timeout: 16
      Tracing: Active
  ImageTransformLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: "[Porter][Image][Lambda] Elevated error volume"
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: >-
        Image transform function has encountered an invocation error
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: LambdaFunctionsFailed
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref ImageTransformLambdaFunction
  # Transcribe Start Lambda
  TranscriptionJobStartLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref ArtifactBucketReadOnlyAccessPolicy
        # For uploading files and file parts to the artifact store
        - !Ref ArtifactBucketWriteAccessPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        # TODO Need to make sure the ArtifactBucketWriteAccessPolicy policy
        # is enough for Transcribe to work
        # - PolicyName: ArtifactBucketWriteAccess
        #   PolicyDocument:
        #     Version: "2012-10-17"
        #     Statement:
        #       - Effect: Allow
        #         Action:
        #           - s3:Get*
        #           - s3:Put*
        #         Resource:
        #           - !Sub ${ArtifactBucket.Arn}/*
        - PolicyName: TranscribeJobStartPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - transcribe:GetTranscriptionJob
                  - transcribe:StartTranscriptionJob
                Effect: Allow
                Resource:
                  - "*"
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  TranscriptionJobStartLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/TranscriptionJobStartLambdaFunction/
      Description: >-
        Starts a transcription job for an artifact file
      Environment:
        Variables:
          ARTIFACT_BUCKET_NAME: !Ref ArtifactBucket
          TRANSCODE_JOB_NAME_PREFIX: !Ref TranscodeJobNamePrefix
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayerVersionArn
      MemorySize: 128
      Role: !GetAtt TranscriptionJobStartLambdaIamRole.Arn
      Runtime: nodejs12.x
      Tags:
        Project: Porter
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
      Timeout: 4
      Tracing: Active
  TranscriptionJobStartLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: "[Porter][Transcribe Start][Lambda] Elevated error volume"
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: >-
        Trascription job start function has encountered an invocation error
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: LambdaFunctionsFailed
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref TranscriptionJobStartLambdaIamRole
  # Transcribe Job Results Lambda
  TranscriptionJobResultsLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
      ManagedPolicyArns:
        # Copy operations are always copying FROM the artifact bucket
        - !Ref ArtifactBucketReadOnlyAccessPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: TranscribeJobReadPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - transcribe:GetTranscriptionJob
                Effect: Allow
                Resource:
                  - "*"
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  TranscriptionJobResultsLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/TranscriptionJobResultsLambdaFunction/
      Description: >-
        Gets the results of a transcribe job and generates task state output
      Environment:
        Variables:
          S3_DESTINATION_WRITER_ROLE: !GetAtt S3DestinationWriterRole.Arn
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayerVersionArn
      MemorySize: 512
      Role: !GetAtt TranscriptionJobResultsLambdaIamRole.Arn
      Runtime: nodejs12.x
      Tags:
        Project: Porter
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
      Timeout: 8
      Tracing: Active
  TranscriptionJobResultsLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: "[Porter][Transcribe Result][Lambda] Elevated error volume"
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: >-
        Trascription job results function has encountered an invocation error
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: LambdaFunctionsFailed
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref TranscriptionJobResultsLambdaIamRole
  # Callback Lambda
  CallbackLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        # Must be able to publish to whatever SNS topics are defined by a job
        - PolicyName: SnsPublish
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sns:Publish"
                Resource:
                  - "*"
        # Must be able to publish to whatever SQS queues are defined by a job
        - PolicyName: SqsSendMessage
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource:
                  - "*"
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  CallbackLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/CallbackLambdaFunction/
      Description: >-
        Sends a job or task callback message to a single endpoint
      Environment:
        Variables:
          MAX_HTTP_REDIRECTS: "3"
          S3_DESTINATION_WRITER_ROLE: !GetAtt S3DestinationWriterRole.Arn
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayerVersionArn
      MemorySize: 128
      Role: !GetAtt CallbackLambdaIamRole.Arn
      Runtime: nodejs12.x
      Tags:
        Project: Porter
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
      Timeout: 4
      Tracing: Active
  CallbackLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: "[Porter][Callback][Lambda] Elevated error volume"
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: >-
        Callback function has encountered an invocation error
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: LambdaFunctionsFailed
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref CallbackLambdaFunction
  # Job Serializer Lambda
  JobSerializerLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: SnsPublishJobExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Ref JobExecutionSnsTopic
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  JobSerializerLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/JobSerializerLambdaFunction/
      Description: >-
        Serialized Porter jobs
      Environment:
        Variables:
          JOB_EXECUTION_SNS_TOPIC_ARN: !Ref JobExecutionSnsTopic
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayerVersionArn
      MemorySize: 128
      Role: !GetAtt JobSerializerLambdaIamRole.Arn
      Runtime: nodejs12.x
      Tags:
        Project: Porter
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
      Timeout: 4
      Tracing: Active
  JobSerializerLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: "[Porter][Serialize][Lambda] Elevated error volume"
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: >-
        Job serializer function has encountered an invocation error
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: LambdaFunctionsFailed
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref JobSerializerLambdaFunction
  # Normalize Output Lambda
  NormalizeOutputLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  NormalizeOutputLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/NormalizeOutputLambdaFunction/
      Description: >-
        Normalizes Porter job output
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayerVersionArn
      MemorySize: 128
      Role: !GetAtt NormalizeOutputLambdaIamRole.Arn
      Runtime: nodejs12.x
      Tags:
        Project: Porter
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
      Timeout: 4
      Tracing: Active
  NormalizeOutputLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: "[Porter][Normalize Out][Lambda] Elevated error volume"
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: >-
        Normalize function has encountered an invocation error
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: LambdaFunctionsFailed
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref NormalizeOutputLambdaFunction
  # Step Functions
  StateMachineIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: LambdaTaskPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt NormalizeInputLambdaFunction.Arn
                  - !GetAtt IngestLambdaFunction.Arn
                  - !GetAtt SourceTypeLambdaFunction.Arn
                  - !GetAtt CopyLambdaFunction.Arn
                  - !GetAtt ImageTransformLambdaFunction.Arn
                  - !GetAtt InspectMediaLambdaFunction.Arn
                  - !GetAtt TranscriptionJobStartLambdaFunction.Arn
                  - !GetAtt TranscriptionJobResultsLambdaFunction.Arn
                  - !GetAtt CallbackLambdaFunction.Arn
                  - !GetAtt TranscodeTaskOutputLambdaFunction.Arn
                  - !GetAtt NormalizeOutputLambdaFunction.Arn
                  - !GetAtt JobSerializerLambdaFunction.Arn
        - PolicyName: PassRoleToEcsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !GetAtt TranscodeEcsTaskExecutionIamRole.Arn
                  - !GetAtt TranscodeEcsTaskIamRole.Arn
        # https://docs.aws.amazon.com/step-functions/latest/dg/ecs-iam.html
        - PolicyName: EcsSyncStaticResourcesPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecs:RunTask
                Resource:
                  - !Ref TranscodeEcsTaskDefinition
              - Effect: Allow
                Action:
                  - ecs:StopTask
                  - ecs:DescribeTasks
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - events:PutTargets
                  - events:PutRule
                  - events:DescribeRule
                Resource:
                  - !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForECSTaskRule
        # https://docs.aws.amazon.com/step-functions/latest/dg/ecs-iam.html
        - PolicyName: EcsSyncDynamicResourcesPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecs:RunTask
                  - ecs:StopTask
                  - ecs:DescribeTasks
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - events:PutTargets
                  - events:PutRule
                  - events:DescribeRule
                Resource:
                  - !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForECSTaskRule
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        Fn::Sub:
          - |-
            {
              "StartAt": "NormalizeInput",
              "States": {
                "NormalizeInput": {
                  "Comment": "Normalizes input data",
                  "Type": "Task",
                  "InputPath": "$",
                  "Resource": "${NormalizeInputLambdaFunctionArn}",
                  "ResultPath": "$",
                  "OutputPath": "$",
                  "Next": "SendJobReceivedCallbacks",
                  "Retry": [
                    {
                      "ErrorEquals": ["States.ALL"],
                      "IntervalSeconds": 1,
                      "MaxAttempts": 2,
                      "BackoffRate": 1
                    }
                  ],
                  "Catch": [
                    {
                      "ErrorEquals": ["States.ALL"],
                      "ResultPath": "$.Error",
                      "Next": "SendJobErrorCallbacks"
                    }
                  ]
                },
                "SendJobReceivedCallbacks": {
                  "Type": "Map",
                  "Comment": "Iterates over all callback endpoints to indicate the job was received",
                  "InputPath": "$",
                  "ItemsPath": "$.Job.Callbacks",
                  "Parameters": {
                    "Callback.$": "$$.Map.Item.Value",
                    "Message": {
                      "JobReceived": {
                        "Job": { "Id.$": "$.Job.Id" },
                        "Execution": { "Id.$": "$$.Execution.Id" }
                      }
                    }
                  },
                  "ResultPath": "$.Void",
                  "OutputPath": "$",
                  "Next": "IngestSourceFile",
                  "MaxConcurrency": 0,
                  "Iterator": {
                    "StartAt": "SendJobReceivedCallback",
                    "States": {
                      "SendJobReceivedCallback": {
                        "Type": "Task",
                        "Comment": "Sends a job received message for a single callback endpoint in the iterator",
                        "InputPath": "$",
                        "Resource": "${CallbackLambdaFunctionArn}",
                        "ResultPath": "$",
                        "OutputPath": "$",
                        "End": true,
                        "Retry": [
                          {
                            "ErrorEquals": ["States.ALL"],
                            "IntervalSeconds": 5,
                            "MaxAttempts": 3,
                            "BackoffRate": 2
                          }
                        ]
                      }
                    }
                  }
                },
                "IngestSourceFile": {
                  "Comment": "Creates an artifact of the source file in S3",
                  "Type": "Task",
                  "InputPath": "$",
                  "Parameters": {
                    "Job": { "Source.$": "$.Job.Source" },
                    "Execution": { "Id.$": "$$.Execution.Id" }
                  },
                  "Resource": "${IngestLambdaFunctionArn}",
                  "ResultPath": "$.Artifact",
                  "OutputPath": "$",
                  "Next": "DetectArtifactType",
                  "Retry": [
                    {
                      "ErrorEquals": ["States.ALL"],
                      "IntervalSeconds": 5,
                      "MaxAttempts": 3,
                      "BackoffRate": 2
                    }
                  ],
                  "Catch": [
                    {
                      "ErrorEquals": ["States.ALL"],
                      "ResultPath": "$.Error",
                      "Next": "SendJobErrorCallbacks"
                    }
                  ]
                },
                "DetectArtifactType": {
                  "Comment": "Detects the file type of the source file artifact",
                  "Type": "Task",
                  "InputPath": "$",
                  "Parameters": { "Artifact.$": "$.Artifact" },
                  "Resource": "${SourceTypeLambdaFunctionArn}",
                  "ResultPath": "$.Artifact.Descriptor",
                  "OutputPath": "$",
                  "Next": "ExecuteTasks",
                  "Retry": [
                    {
                      "ErrorEquals": ["States.ALL"],
                      "IntervalSeconds": 5,
                      "MaxAttempts": 3,
                      "BackoffRate": 2
                    }
                  ],
                  "Catch": [
                    {
                      "ErrorEquals": ["States.ALL"],
                      "ResultPath": "$.Error",
                      "Next": "SendJobErrorCallbacks"
                    }
                  ]
                },
                "ExecuteTasks": {
                  "Type": "Map",
                  "Comment": "Iterates over all tasks included in the job",
                  "InputPath": "$",
                  "ItemsPath": "$.Job.Tasks",
                  "Parameters": {
                    "Job": { "Id.$": "$.Job.Id" },
                    "Execution": { "Id.$": "$$.Execution.Id" },
                    "Artifact.$": "$.Artifact",
                    "TaskIndex.$": "$$.Map.Item.Index",
                    "Task.$": "$$.Map.Item.Value",
                    "Callbacks.$": "$.Job.Callbacks"
                  },
                  "ResultPath": "$.TaskResults",
                  "OutputPath": "$",
                  "Next": "SendJobCompleteCallbacks",
                  "MaxConcurrency": 0,
                  "Iterator": {
                    "StartAt": "RouteTaskType",
                    "States": {
                      "RouteTaskType": {
                        "Type": "Choice",
                        "Comment": "For the current task being iterated, routes to the appropriate state",
                        "Default": "UnknownTaskType",
                        "Choices": [
                          { "Variable": "$.Task.Type", "StringEquals": "Inspect", "Next": "ExecuteInspectTask" },
                          { "Variable": "$.Task.Type", "StringEquals": "Copy", "Next": "ExecuteCopyTask" },
                          { "Variable": "$.Task.Type", "StringEquals": "Transcode", "Next": "ExecuteTranscodeTask" },
                          { "Variable": "$.Task.Type", "StringEquals": "Image", "Next": "ExecuteImageTask" },
                          { "Variable": "$.Task.Type", "StringEquals": "Transcribe", "Next": "ExecuteTranscribeTask" }
                        ]
                      },
                      "SendTaskCallbacks": {
                        "Type": "Map",
                        "Comment": "Iterates over all callback endpoints to send messages when tasks are successful",
                        "InputPath": "$",
                        "ItemsPath": "$.Callbacks",
                        "Parameters": {
                          "Callback.$": "$$.Map.Item.Value",
                          "TaskIteratorIndex.$": "$.TaskIndex",
                          "Message": {
                            "TaskResult": {
                              "Job": { "Id.$": "$.Job.Id" },
                              "Execution": { "Id.$": "$$.Execution.Id" },
                              "Result.$": "$.TaskResult"
                            }
                          }
                        },
                        "ResultPath": "$.Void",
                        "OutputPath": "$.TaskResult",
                        "End": true,
                        "MaxConcurrency": 0,
                        "Iterator": {
                          "StartAt": "SendTaskCallback",
                          "States": {
                            "SendTaskCallback": {
                              "Type": "Task",
                              "Comment": "Sends a callback message to a single endpoint when tasks are successful",
                              "InputPath": "$",
                              "Resource": "${CallbackLambdaFunctionArn}",
                              "ResultPath": "$",
                              "OutputPath": "$",
                              "End": true,
                              "Retry": [
                                {
                                  "ErrorEquals": ["States.ALL"],
                                  "IntervalSeconds": 5,
                                  "MaxAttempts": 3,
                                  "BackoffRate": 2
                                }
                              ]
                            }
                          }
                        }
                      },
                      "UnknownTaskType": {
                        "Type": "Pass",
                        "Comment": "Handles and blackholes tasks with an unknown type",
                        "End": true,
                        "ResultPath": "$",
                        "Result": { "Task": "Null" }
                      },
                      "ExecuteInspectTask": {
                        "Type": "Task",
                        "Comment": "Inspects the artifact file",
                        "Resource": "${InspectMediaLambdaFunctionArn}",
                        "InputPath": "$",
                        "Parameters": {
                          "Job": { "Id.$": "$.Job.Id" },
                          "Artifact.$": "$.Artifact"
                        },
                        "ResultPath": "$.TaskResult",
                        "OutputPath": "$",
                        "Next": "SendTaskCallbacks",
                        "Retry": [
                          {
                            "ErrorEquals": ["States.ALL"],
                            "IntervalSeconds": 5,
                            "MaxAttempts": 3,
                            "BackoffRate": 2
                          }
                        ]
                      },
                      "ExecuteCopyTask": {
                        "Type": "Task",
                        "Comment": "Copies the artifact",
                        "Resource": "${CopyLambdaFunctionArn}",
                        "InputPath": "$",
                        "Parameters": {
                          "Job": { "Id.$": "$.Job.Id" },
                          "Artifact.$": "$.Artifact",
                          "Task.$": "$.Task"
                        },
                        "ResultPath": "$.TaskResult",
                        "OutputPath": "$",
                        "Next": "SendTaskCallbacks",
                        "Retry": [
                          {
                            "ErrorEquals": ["States.ALL"],
                            "IntervalSeconds": 5,
                            "MaxAttempts": 3,
                            "BackoffRate": 2
                          }
                        ]
                      },
                      "ExecuteTranscodeTask": {
                        "Type": "Task",
                        "Comment": "Transcodes multimedia artifact",
                        "Resource": "arn:aws:states:::ecs:runTask.sync",
                        "InputPath": "$",
                        "Parameters": {
                          "Cluster": "${EcsClusterArn}",
                          "LaunchType":"FARGATE",
                          "Overrides": {
                            "ContainerOverrides": [
                              {
                                "Environment": [
                                  {
                                    "Name": "STATE_MACHINE_EXECUTION_ID",
                                    "Value.$": "$$.Execution.Id"
                                  }, {
                                    "Name": "STATE_MACHINE_ARTIFACT_BUCKET_NAME",
                                    "Value.$": "$.Artifact.BucketName"
                                  }, {
                                    "Name": "STATE_MACHINE_ARTIFACT_OBJECT_KEY",
                                    "Value.$": "$.Artifact.ObjectKey"
                                  }, {
                                    "Name": "STATE_MACHINE_DESTINATION_BUCKET_NAME",
                                    "Value.$": "$.Task.Destination.BucketName"
                                  }, {
                                    "Name": "STATE_MACHINE_DESTINATION_OBJECT_KEY",
                                    "Value.$": "$.Task.Destination.ObjectKey"
                                  }, {
                                    "Name": "STATE_MACHINE_DESTINATION_FORMAT",
                                    "Value.$": "$.Task.Format"
                                  }, {
                                    "Name": "STATE_MACHINE_FFMPEG_GLOBAL_OPTIONS",
                                    "Value.$": "$.Task.FFmpeg.GlobalOptions"
                                  }, {
                                    "Name": "STATE_MACHINE_FFMPEG_INPUT_FILE_OPTIONS",
                                    "Value.$": "$.Task.FFmpeg.InputFileOptions"
                                  }, {
                                    "Name": "STATE_MACHINE_FFMPEG_OUTPUT_FILE_OPTIONS",
                                    "Value.$": "$.Task.FFmpeg.OutputFileOptions"
                                  }, {
                                    "Name": "STATE_MACHINE_JOB_ID",
                                    "Value.$": "$.Job.Id"
                                  }, {
                                    "Name": "STATE_MACHINE_S3_DESTINATION_WRITER_ROLE",
                                    "Value": "${S3DestinationWriterRoleArn}"
                                  }, {
                                    "Name": "STATE_MACHINE_AWS_REGION",
                                    "Value": "${AwsRegion}"
                                  }
                                ],
                                "Name": "${TranscodeContainerName}"
                              }
                            ]
                          },
                          "NetworkConfiguration": {
                            "AwsvpcConfiguration": {
                              "AssignPublicIp": "ENABLED",
                              "Subnets": [
                                "${VpcSubnet1}",
                                "${VpcSubnet2}"
                              ]
                            }
                          },
                          "TaskDefinition": "${TranscodeEcsTaskDefinitionArn}"
                        },
                        "ResultPath": "$.TaskResult",
                        "OutputPath": "$",
                        "Next": "FormatTranscodeTaskOuput",
                        "Retry": [
                          {
                            "ErrorEquals": ["States.ALL"],
                            "IntervalSeconds": 5,
                            "MaxAttempts": 3,
                            "BackoffRate": 2
                          }
                        ]
                      },
                      "FormatTranscodeTaskOuput": {
                        "Type": "Task",
                        "Comment": "Formats the output of a transcode task",
                        "Resource": "${TranscodeTaskOutputLambdaFunctionArn}",
                        "InputPath": "$",
                        "Parameters": {
                          "Job": { "Id.$": "$.Job.Id" },
                          "Task.$": "$.Task"
                        },
                        "ResultPath": "$.TaskResult",
                        "OutputPath": "$",
                        "Next": "SendTaskCallbacks",
                        "Retry": [
                          {
                            "ErrorEquals": ["States.ALL"],
                            "IntervalSeconds": 5,
                            "MaxAttempts": 3,
                            "BackoffRate": 2
                          }
                        ]
                      },
                      "ExecuteImageTask": {
                        "Type": "Task",
                        "Comment": "Manipulates and converts image artifacts",
                        "Resource": "${ImageTransformLambdaFunctionArn}",
                        "InputPath": "$",
                        "Parameters": {
                          "Job": { "Id.$": "$.Job.Id" },
                          "Artifact.$": "$.Artifact",
                          "Task.$": "$.Task"
                        },
                        "ResultPath": "$.TaskResult",
                        "OutputPath": "$",
                        "Next": "SendTaskCallbacks",
                        "Retry": [
                          {
                            "ErrorEquals": ["States.ALL"],
                            "IntervalSeconds": 5,
                            "MaxAttempts": 3,
                            "BackoffRate": 2
                          }
                        ]
                      },
                      "ExecuteTranscribeTask": {
                        "Type": "Task",
                        "Comment": "Transcribes audio from artifacts",
                        "Resource": "arn:${AWS::Partition}:states:::lambda:invoke.waitForTaskToken",
                        "InputPath": "$",
                        "Parameters": {
                          "FunctionName": "${TranscriptionJobStartLambdaFunctionArn}",
                          "Payload": {
                            "Job": { "Id.$": "$.Job.Id" },
                            "Execution": { "Id.$": "$$.Execution.Id" },
                            "Artifact.$": "$.Artifact",
                            "Task.$": "$.Task",
                            "TaskIteratorIndex.$": "$.TaskIndex",
                            "TaskToken.$": "$$.Task.Token"
                          }
                        },
                        "ResultPath": "$.TranscriptionJob",
                        "OutputPath": "$",
                        "Next": "TranscribeTaskOutput",
                        "Retry": [
                          {
                            "ErrorEquals": ["States.ALL"],
                            "IntervalSeconds": 5,
                            "MaxAttempts": 3,
                            "BackoffRate": 2
                          }
                        ]
                      },
                      "TranscribeTaskOutput": {
                        "Type": "Task",
                        "Comment": "Formats the output of a transcribe task",
                        "Resource": "${TranscriptionJobResultsLambdaFunctionArn}",
                        "InputPath": "$",
                        "Parameters": {
                          "Task.$": "$.Task",
                          "TranscriptionJob.$": "$.TranscriptionJob"
                        },
                        "ResultPath": "$.TaskResult",
                        "OutputPath": "$",
                        "Next": "SendTaskCallbacks",
                        "Retry": [
                          {
                            "ErrorEquals": ["States.ALL"],
                            "IntervalSeconds": 5,
                            "MaxAttempts": 3,
                            "BackoffRate": 2
                          }
                        ]
                      }
                    }
                  },
                  "Catch": [
                    {
                      "ErrorEquals": ["States.ALL"],
                      "ResultPath": "$.Error",
                      "Next": "SendJobErrorCallbacks"
                    }
                  ]
                },
                "SendJobCompleteCallbacks": {
                  "Type": "Map",
                  "Comment": "Iterates over all callback endpoints to send job results",
                  "InputPath": "$",
                  "ItemsPath": "$.Job.Callbacks",
                  "Parameters": {
                    "Callback.$": "$$.Map.Item.Value",
                    "Message": {
                      "JobResult": {
                        "Job": { "Id.$": "$.Job.Id" },
                        "Execution": { "Id.$": "$$.Execution.Id" },
                        "Result.$": "$.TaskResults.[?(@.Task && @.Task != 'Null')]"
                      }
                    }
                  },
                  "ResultPath": "$.Void",
                  "OutputPath": "$",
                  "Next": "StartSerializedJobs",
                  "MaxConcurrency": 0,
                  "Iterator": {
                    "StartAt": "SendJobCompleteCallback",
                    "States": {
                      "SendJobCompleteCallback": {
                        "Type": "Task",
                        "Comment": "Sends a callback message to a single endpoint in the iterator with a job result",
                        "InputPath": "$",
                        "Resource": "${CallbackLambdaFunctionArn}",
                        "ResultPath": "$",
                        "OutputPath": "$",
                        "End": true,
                        "Retry": [
                          {
                            "ErrorEquals": ["States.ALL"],
                            "IntervalSeconds": 5,
                            "MaxAttempts": 3,
                            "BackoffRate": 2
                          }
                        ]
                      }
                    }
                  }
                },
                "StartSerializedJobs": {
                  "Type": "Map",
                  "Comment": "Iterates over all serialized jobs and sends them to SNS",
                  "InputPath": "$",
                  "ItemsPath": "$.Job.SerializedJobs",
                  "Parameters": {
                    "Execution": { "Id.$": "$$.Execution.Id" },
                    "ExecutionTrace.$": "$.Job.ExecutionTrace",
                    "SerializedJob.$": "$$.Map.Item.Value"
                  },
                  "ResultPath": "$.Void",
                  "OutputPath": "$",
                  "Next": "NormalizeOutput",
                  "MaxConcurrency": 0,
                  "Iterator": {
                    "StartAt": "StartSerializedJobExecution",
                    "States": {
                      "StartSerializedJobExecution": {
                        "Type": "Task",
                        "Comment": "Sends a serialized job to the job execution SNS topic",
                        "InputPath": "$",
                        "Resource": "${JobSerializerLambdaFunctionArn}",
                        "ResultPath": "$",
                        "OutputPath": "$",
                        "End": true,
                        "Retry": [
                          {
                            "ErrorEquals": ["States.ALL"],
                            "IntervalSeconds": 5,
                            "MaxAttempts": 3,
                            "BackoffRate": 2
                          }
                        ]
                      }
                    }
                  }
                },
                "NormalizeOutput": {
                  "Comment": "Normalizes output data",
                  "Type": "Task",
                  "InputPath": "$",
                  "Parameters": {
                    "Message": {
                      "JobResult": {
                        "Job": { "Id.$": "$.Job.Id" },
                        "Execution": { "Id.$": "$$.Execution.Id" },
                        "Result.$": "$.TaskResults.[?(@.Task && @.Task != 'Null')]"
                      }
                    }
                  },
                  "Resource": "${NormalizeOutputLambdaFunctionArn}",
                  "ResultPath": "$",
                  "OutputPath": "$",
                  "End": true
                },
                "SendJobErrorCallbacks": {
                  "Type": "Map",
                  "Comment": "Iterates over all callback endpoints to send job error",
                  "End": true,
                  "InputPath": "$",
                  "ItemsPath": "$.Job.Callbacks",
                  "Parameters": {
                    "Callback.$": "$$.Map.Item.Value",
                    "Message": {
                      "JobResult": {
                        "Job": { "Id.$": "$.Job.Id" },
                        "Execution": { "Id.$": "$$.Execution.Id" },
                        "Error.$": "$.Error"
                      }
                    }
                  },
                  "MaxConcurrency": 0,
                  "Iterator": {
                    "StartAt": "SendJobErrorCallback",
                    "States": {
                      "SendJobErrorCallback": {
                        "Type": "Task",
                        "Comment": "Sends a callback message to a single endpoint in the iterator with a job error",
                        "InputPath": "$",
                        "Resource": "${CallbackLambdaFunctionArn}",
                        "ResultPath": "$",
                        "OutputPath": "$",
                        "End": true,
                        "Retry": [
                          {
                            "ErrorEquals": ["States.ALL"],
                            "IntervalSeconds": 5,
                            "MaxAttempts": 3,
                            "BackoffRate": 2
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          - NormalizeInputLambdaFunctionArn: !GetAtt NormalizeInputLambdaFunction.Arn
            NormalizeOutputLambdaFunctionArn: !GetAtt NormalizeOutputLambdaFunction.Arn
            IngestLambdaFunctionArn: !GetAtt IngestLambdaFunction.Arn
            SourceTypeLambdaFunctionArn: !GetAtt SourceTypeLambdaFunction.Arn
            CopyLambdaFunctionArn: !GetAtt CopyLambdaFunction.Arn
            ImageTransformLambdaFunctionArn: !GetAtt ImageTransformLambdaFunction.Arn
            InspectMediaLambdaFunctionArn: !GetAtt InspectMediaLambdaFunction.Arn
            CallbackLambdaFunctionArn: !GetAtt CallbackLambdaFunction.Arn
            TranscriptionJobStartLambdaFunctionArn: !GetAtt TranscriptionJobStartLambdaFunction.Arn
            TranscriptionJobResultsLambdaFunctionArn: !GetAtt TranscriptionJobResultsLambdaFunction.Arn
            EcsClusterArn: !GetAtt EcsCluster.Arn
            TranscodeEcsTaskDefinitionArn: !Ref TranscodeEcsTaskDefinition
            TranscodeTaskOutputLambdaFunctionArn: !GetAtt TranscodeTaskOutputLambdaFunction.Arn
            JobSerializerLambdaFunctionArn: !GetAtt JobSerializerLambdaFunction.Arn
            VpcSubnet1: !Ref Subnet1
            VpcSubnet2: !Ref Subnet2
            TranscodeContainerName: !Sub ${AWS::StackName}-transcode-container
            S3DestinationWriterRoleArn: !GetAtt S3DestinationWriterRole.Arn
            AwsRegion: !Ref AWS::Region
      RoleArn: !GetAtt StateMachineIamRole.Arn
      Tags:
        - Key: Project
          Value: Porter
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  StateMachineTimedOutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmName: !Sub "[Porter][States] Experiencing time outs (${AWS::StackName})"
      AlarmActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      OKActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      AlarmDescription: >-
        Porter state machine has experienced execution time outs
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: ExecutionsTimedOut
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref StateMachine
  StateMachineThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmName: !Sub "[Porter][States] Events being throttled (${AWS::StackName})"
      AlarmActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      OKActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      AlarmDescription: >-
        Porter state machine is being throttled
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: ExecutionThrottled
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref StateMachine
  StateMachineFailureAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmName: !Sub "[Porter][States] Experiencing failures (${AWS::StackName})"
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: >-
        Porter state machine experienced uncaught errors
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: ExecutionsFailed
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref StateMachine
Outputs:
  JobExecutionSnsTopicArn:
    Value: !Ref JobExecutionSnsTopic
  JobExecutionSqsQueueArn:
    Value: !GetAtt JobExecutionSqsQueue.Arn
  JobExecutionSqsQueueUrl:
    Value: !Ref JobExecutionSqsQueue
  S3DestinationWriterRoleArn:
    Value: !GetAtt S3DestinationWriterRole.Arn
