AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: >-
  Creates a Step Function state machine for processing user created content, as
  well as some supporting resources

Conditions:
  CreateProductionResources: !Equals [!Ref EnvironmentType, Production]
  CreateSqsEventMapping: !Equals [!Ref EnableSqsJobExecution, "True"]
  CreateDefaultEventBusRule: !Equals [!Ref EnableDefaultEventBusRule, "True"]

Parameters:
  # Generally set by the deploy pipeline
  TranscodeEcsTaskDefinitionImage:
    Type: String
  FtpCopyEcsTaskDefinitionImage:
    Type: String
  # Optional
  EnableSqsJobExecution:
    Type: String
    AllowedValues:
      - "True"
      - "False"
    Default: "False"
  EnableDefaultEventBusRule:
    Type: String
    AllowedValues:
      - "True"
      - "False"
    Default: "True"
  SubnetIPv4CidrBits:
    Default: 14
    Description: >-
      The number of subnet bits for each subnet's IPv4 CIDR.
      For example, a value of 8 will create CIDRs with a mask of "/24".
      To calculate the required host bits for a given subnet bits, subtract the
      subnet bits from 32 for IPv4.
      Updating requires replacement of all subnets. When subnets are being
      replaced the ranges of the new subnets cannot overlap those being
      replaced.
    MaxValue: 256
    MinValue: 1
    Type: Number
  SubnetIPv6CidrBits:
    Default: 64
    Description: >-
      The number of subnet bits for each subnet's IPv6 CIDR.
      For example, a value of 64 will create CIDRs with a mask of "/64".
      To calculate the required host bits for a given subnet bits, subtract the
      subnet bits from 128 for IPv6.
      Updating requires replacement of all subnets. When subnets are being
      replaced the ranges of the new subnets cannot overlap those being
      replaced.
    MaxValue: 256
    MinValue: 1
    Type: Number
  # Required
  EnvironmentType:
    Type: String
    AllowedValues:
      - Testing
      - Staging
      - Production
  EnvironmentTypeAbbreviation:
    Type: String
    AllowedValues:
      - test
      - stag
      - prod
  TranscodeJobNamePrefix:
    Type: String

Resources:
  # Managed IAM Policies
  ArtifactBucketReadOnlyAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: >-
        Provides read-only access to the artifact bucket for a particular
        Porter deployment
      PolicyDocument:
        Statement:
          - Action: s3:GetObject*
            Effect: Allow
            Resource: !Sub arn:aws:s3:::${ArtifactBucket}/*
        Version: "2012-10-17"
  ArtifactBucketWriteAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: >-
        Provides limitedS S3 list and write access to the artifact bucket for a
        particular Porter deployment
      PolicyDocument:
        Statement:
          - Action: s3:ListBucketMultipartUploads
            Effect: Allow
            Resource: !Sub arn:aws:s3:::${ArtifactBucket}
          - Action:
              - s3:PutObject
              - s3:AbortMultipartUpload
              - s3:ListMultipartUploadParts
            Effect: Allow
            Resource: !Sub arn:aws:s3:::${ArtifactBucket}/*
        Version: "2012-10-17"
  # General-Purpose IAM Roles
  S3DestinationWriterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              AWS:
                - !GetAtt CopyLambdaIamRole.Arn
                - !GetAtt ImageTransformLambdaIamRole.Arn
                - !GetAtt WavWrapLambdaIamRole.Arn
                - !GetAtt TranscriptionJobResultsLambdaIamRole.Arn
                - !GetAtt CallbackLambdaIamRole.Arn
                - !GetAtt TranscodeEcsTaskIamRole.Arn
        Version: "2012-10-17"
      ManagedPolicyArns:
        # Calls to s3.copyObject need read access to the artifact bucket
        - !Ref ArtifactBucketReadOnlyAccessPolicy
      Policies:
        # For cross-account S3 buckets, the IAM role needs the same
        # permissions that the bucket policy grants to this role
        - PolicyName: S3DestinationWritePolicy
          PolicyDocument:
            Statement:
              - Action:
                  - s3:ListBucketMultipartUploads
                  - s3:PutObject*
                  - s3:AbortMultipartUpload
                  - s3:ListMultipartUploadParts
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  # SNS
  ## Messages sent to this topic will be handled by a Lambda function which
  ## executes the Step Functions state machine. The `input` to the state machine
  ## execution will be the body of the SNS message. The SNS message must be
  ## valic JSON.
  JobExecutionSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  JobExecutionSnsTopicLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures: [arm64]
      CodeUri: src/lambdas/job-execution-sns/
      Description: >-
        Relays SNS messages sent to a subscribed topic to a State Machine
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref StateMachine
      Events:
        JobExecution:
          Properties:
            Topic: !Ref JobExecutionSnsTopic
          Type: SNS
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayer
      MemorySize: 128
      Policies:
        - Statement:
            - Action: states:StartExecution
              Effect: Allow
              Resource: !Ref StateMachine
              Sid: AllowJobExecution
          Version: "2012-10-17"
      Runtime: nodejs14.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:application: Porter
      Timeout: 8
  JobExecutionSnsTopicLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${JobExecutionSnsTopicLambdaFunction}
      RetentionInDays: 30
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  JobExecutionSnsTopicLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      AlarmName: !Sub MAJOR [Porter] Job execution SNS Lambda <${EnvironmentTypeAbbreviation}> INVOCATION FAILED (${AWS::StackName})
      AlarmDescription: !Sub >-
        The AWS Lambda function resource subscribed to the ${EnvironmentType}
        job execution SNS topic failed. This likely means that a job that was
        sent to Porter did not reach the state machine.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref JobExecutionSnsTopicLambdaFunction
  # SQS
  ## Messages sent to this queue will be handled by a Lambda function which
  ## executes the Step Functions state machine. The `input` to the state machine
  ## execution will be the body of the SQS message. The SQS message must be
  ## valic JSON.
  JobExecutionSqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  JobExecutionSqsQueueLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: SqsPolicy
          PolicyDocument:
            Statement:
              - Action:
                  - sqs:ChangeMessageVisibility
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ReceiveMessage
                Effect: Allow
                Resource: !GetAtt JobExecutionSqsQueue.Arn
            Version: "2012-10-17"
        - PolicyName: StepFunctionsPolicy
          PolicyDocument:
            Statement:
              - Action: states:StartExecution
                Effect: Allow
                Resource: !Ref StateMachine
            Version: "2012-10-17"
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  JobExecutionSqsQueueLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures: [arm64]
      CodeUri: src/lambdas/job-execution-sqs/
      Description: >-
        Relays SQS messages sent to a subscribed queue to a State Machine
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref StateMachine
      Events:
        SqsTrigger:
          Type: SQS
          Properties:
            Enabled: !If [CreateSqsEventMapping, true, false]
            Queue: !GetAtt JobExecutionSqsQueue.Arn
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayer
      MemorySize: 128
      Role: !GetAtt JobExecutionSqsQueueLambdaIamRole.Arn
      Runtime: nodejs14.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:application: Porter
      Timeout: 8
  JobExecutionSqsQueueLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${JobExecutionSqsQueueLambdaFunction}
      RetentionInDays: 30
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  JobExecutionSqsQueueLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      AlarmName: !Sub MAJOR [Porter] Job execution SQS Lambda <${EnvironmentTypeAbbreviation}> INVOCATION FAILED (${AWS::StackName})
      AlarmDescription: !Sub >-
        The AWS Lambda function resource subscribed to the ${EnvironmentType}
        job execution SQS queue failed. This likely means that a job that was
        sent to Porter did not reach the state machine.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref JobExecutionSqsQueueLambdaFunction
  # EventBridge
  CustomEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Ref AWS::StackName
  JobExecutionEventRuleIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyName: StepFunctionsPolicy
          PolicyDocument:
            Statement:
              - Action: states:StartExecution
                Effect: Allow
                Resource: !Ref StateMachine
            Version: "2012-10-17"
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  CustomEventBusJobExecutionEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref CustomEventBus
      EventPattern:
        detail-type:
          - Porter Job Execution Submission
      State: ENABLED
      Targets:
        - Arn: !Ref StateMachine
          Id: !Sub ${AWS::StackName}-JobExecutionEventRule
          InputPath: $.detail
          RoleArn: !GetAtt JobExecutionEventRuleIamRole.Arn
  DefaultEventBusJobExecutionEventRule:
    Type: AWS::Events::Rule
    Condition: CreateDefaultEventBusRule
    Properties:
      EventPattern:
        detail-type:
          - Porter Job Execution Submission
      State: ENABLED
      Targets:
        - Arn: !Ref StateMachine
          Id: !Sub ${AWS::StackName}-JobExecutionEventRule
          InputPath: $.detail
          RoleArn: !GetAtt JobExecutionEventRuleIamRole.Arn
  # Transcode Job Watcher
  # Transcode tasks are submitted async, but the state machine will wait for a
  # task token to be sent back as part of a SendTaskSuccess or SendTaskFailure
  # call. The job watcher function is triggered by changes to transcribe jobs,
  # and sends the appropriate task result based on the result of the job, at
  # which point the execution of the state machine will proceed.
  TranscriptionJobStateChangeLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures: [arm64]
      CodeUri: src/lambdas/transcription-job-state-change/
      Description: Handles transcription job state change events
      Environment:
        Variables:
          ARTIFACT_BUCKET_NAME: !Ref ArtifactBucket
          TRANSCODE_JOB_NAME_PREFIX: !Ref TranscodeJobNamePrefix
      Events:
        TranscribeJobStateChange:
          Properties:
            Pattern:
              detail:
                TranscriptionJobStatus:
                  - COMPLETED
                  - FAILED
                TranscriptionJobName:
                  - prefix: !Ref TranscodeJobNamePrefix
              detail-type:
                - Transcribe Job State Change
              source:
                - aws.transcribe
            Target:
              Id: !Sub ${AWS::StackName}.Transcribe-JobState
          Type: EventBridgeRule
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayer
      MemorySize: 128
      Policies:
        - !Ref ArtifactBucketReadOnlyAccessPolicy
        - Statement:
            - Action:
                - states:SendTaskFailure
                - states:SendTaskSuccess
              Effect: Allow
              Resource: !Ref StateMachine
              Sid: AllowSendTaskResults
          Version: "2012-10-17"
      Runtime: nodejs14.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:application: Porter
      Timeout: 4
  TranscriptionJobStateChangeLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${TranscriptionJobStateChangeLambdaFunction}
      RetentionInDays: 30
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  TranscriptionJobStateChangeLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      AlarmName: !Sub MINOR [Porter] Transcription state Lambda <${EnvironmentTypeAbbreviation}> INVOCATION FAILED (${AWS::StackName})
      AlarmDescription: >-
        The AWS Lambda function resource that watches for AWS Transcribe job
        state changes failed. A Porter job could become stuck when this
        happens, since it will wait a long time for the transcription to
        complete
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: LambdaFunctionsFailed
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: LambdaFunctionArn
          Value: !GetAtt TranscriptionJobStateChangeLambdaFunction.Arn
  ##############################################################################
  ##############################################################################
  ##############################################################################
  # ██╗   ██╗██████╗  ██████╗
  # ██║   ██║██╔══██╗██╔════╝
  # ██║   ██║██████╔╝██║
  # ╚██╗ ██╔╝██╔═══╝ ██║
  #  ╚████╔╝ ██║     ╚██████╗
  #   ╚═══╝  ╚═╝      ╚═════╝
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.16.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - { Key: Name, Value: !Sub "${AWS::StackName}" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  # IPv6
  IPv6VpcCidrBlock:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      AmazonProvidedIpv6CidrBlock: true
      VpcId: !Ref VPC
  # DHCP
  DhcpOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: ec2.internal
      DomainNameServers:
        - AmazonProvidedDNS
      Tags:
        - { Key: Name, Value: !Sub "${AWS::StackName}" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  DhcpOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      DhcpOptionsId: !Ref DhcpOptions
      VpcId: !Ref VPC
  # Internet gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - { Key: Name, Value: !Sub "${AWS::StackName}_public" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  VpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  # Routing for public subnets
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - { Key: Name, Value: !Sub "${AWS::StackName}_public" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
      VpcId: !Ref VPC
  IPv4Route:
    DependsOn: VpcGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
  IPv6Route:
    Type: AWS::EC2::Route
    Properties:
      DestinationIpv6CidrBlock: ::/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
  # Public subnets
  PublicSubnet1:
    # DeletionPolicy: Retain
    DependsOn: IPv6VpcCidrBlock
    Type: AWS::EC2::Subnet
    # UpdateReplacePolicy: Retain
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Select [0, !Cidr [!GetAtt VPC.CidrBlock, 1, !Ref SubnetIPv4CidrBits]]
      Ipv6CidrBlock: !Select [0, !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], 1, !Ref SubnetIPv6CidrBits]]
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
        - Key: Name
          Value:
            Fn::Sub:
              - ${AWS::StackName}_public-1_${ZoneName}
              - ZoneName: !Select [0, !GetAZs ""]
      VpcId: !Ref VPC
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2:
    # DeletionPolicy: Retain
    DependsOn: IPv6VpcCidrBlock
    Type: AWS::EC2::Subnet
    # UpdateReplacePolicy: Retain
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Select [1, !Cidr [!GetAtt VPC.CidrBlock, 2, !Ref SubnetIPv4CidrBits]]
      Ipv6CidrBlock: !Select [1, !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], 2, !Ref SubnetIPv6CidrBits]]
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
        - Key: Name
          Value:
            Fn::Sub:
              - ${AWS::StackName}_public-2_${ZoneName}
              - ZoneName: !Select [1, !GetAZs ""]
      VpcId: !Ref VPC
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  # ACL for public subnets
  PublicSubnetNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      Tags:
        - { Key: Name, Value: !Sub "${AWS::StackName}_public" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
      VpcId: !Ref VPC
  ##
  PublicSubnetIPv4AllowFtpControlConnectionOutboundTrafficNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref PublicSubnetNetworkAcl
      PortRange:
        From: 21
        To: 21
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 100
  PublicSubnetIPv6AllowFtpControlConnectionOutboundTrafficNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: true
      Ipv6CidrBlock: ::/0
      NetworkAclId: !Ref PublicSubnetNetworkAcl
      PortRange:
        From: 21
        To: 21
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 101
  ##
  PublicSubnetIPv4AllowFtpPassiveDataConnectionOutboundTrafficNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref PublicSubnetNetworkAcl
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 102
  PublicSubnetIPv6AllowFtpPassiveDataConnectionOutboundTrafficNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: true
      Ipv6CidrBlock: ::/0
      NetworkAclId: !Ref PublicSubnetNetworkAcl
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 103
  ##
  PublicSubnetIPv4AllowHttpsOutboundTrafficNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref PublicSubnetNetworkAcl
      PortRange:
        From: 443
        To: 443
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 104
  PublicSubnetIPv6AllowHttpsOutboundTrafficNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: true
      Ipv6CidrBlock: ::/0
      NetworkAclId: !Ref PublicSubnetNetworkAcl
      PortRange:
        From: 443
        To: 443
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 105
  ##
  PublicSubnetIPv4AllowFtpActiveDataConnectionInboundTrafficNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref PublicSubnetNetworkAcl
      PortRange:
        From: 32768
        To: 61000
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 100
  PublicSubnetIPv6AllowFtpActiveDataConnectionInboundTrafficNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: false
      Ipv6CidrBlock: ::/0
      NetworkAclId: !Ref PublicSubnetNetworkAcl
      PortRange:
        From: 62000
        To: 62099
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 101
  ##
  PublicSubnetIPv4AllowEphemeralInboundTrafficNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref PublicSubnetNetworkAcl
      PortRange:
        From: 32768
        To: 61000
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 102
  PublicSubnetIPv6AllowEphemeralInboundTrafficNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: false
      Ipv6CidrBlock: ::/0
      NetworkAclId: !Ref PublicSubnetNetworkAcl
      PortRange:
        From: 62000
        To: 62099
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 103
  ##
  PublicSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PublicSubnetNetworkAcl
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PublicSubnetNetworkAcl
      SubnetId: !Ref PublicSubnet2
  # Routing for private subnets
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - { Key: Name, Value: !Sub "${AWS::StackName}_private" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  # Private subnets
  PrivateSubnet1:
    # DeletionPolicy: Retain
    DependsOn: IPv6VpcCidrBlock
    Type: AWS::EC2::Subnet
    # UpdateReplacePolicy: Retain
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Select [2, !Cidr [!GetAtt VPC.CidrBlock, 3, !Ref SubnetIPv4CidrBits]]
      Ipv6CidrBlock: !Select [2, !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], 3, !Ref SubnetIPv6CidrBits]]
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
        - Key: Name
          Value:
            Fn::Sub:
              - ${AWS::StackName}_private-1_${ZoneName}
              - ZoneName: !Select [0, !GetAZs ""]
      VpcId: !Ref VPC
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1
  PrivateSubnet2:
    # DeletionPolicy: Retain
    DependsOn: IPv6VpcCidrBlock
    Type: AWS::EC2::Subnet
    # UpdateReplacePolicy: Retain
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Select [3, !Cidr [!GetAtt VPC.CidrBlock, 4, !Ref SubnetIPv4CidrBits]]
      Ipv6CidrBlock: !Select [3, !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], 4, !Ref SubnetIPv6CidrBits]]
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
        - Key: Name
          Value:
            Fn::Sub:
              - ${AWS::StackName}_private-2_${ZoneName}
              - ZoneName: !Select [1, !GetAZs ""]
      VpcId: !Ref VPC
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2
  # ACL for private subnets
  # Private subnets allow all inbound and outbound traffic
  PrivateSubnetNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      Tags:
        - { Key: Name, Value: !Sub "${AWS::StackName}_private" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
      VpcId: !Ref VPC
  ##
  PrivateSubnetIPv4AllowAllInboundTrafficNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref PrivateSubnetNetworkAcl
      Protocol: -1 # All
      RuleAction: allow
      RuleNumber: 100
  PrivateSubnetIPv6AllowAllInboundTrafficNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: false
      Ipv6CidrBlock: ::/0
      NetworkAclId: !Ref PrivateSubnetNetworkAcl
      Protocol: -1 # All
      RuleAction: allow
      RuleNumber: 101
  ##
  PrivateSubnetIPv4AllowAllOutboudTrafficNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref PrivateSubnetNetworkAcl
      Protocol: -1 # All
      RuleAction: allow
      RuleNumber: 100
  PrivateSubnetIPv6AllowAllOutboudTrafficNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: true
      Ipv6CidrBlock: ::/0
      NetworkAclId: !Ref PrivateSubnetNetworkAcl
      Protocol: -1 # All
      RuleAction: allow
      RuleNumber: 101
  ##
  PrivateSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PrivateSubnetNetworkAcl
      SubnetId: !Ref PrivateSubnet1
  PrivateSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PrivateSubnetNetworkAcl
      SubnetId: !Ref PrivateSubnet2
  ##############################################################################
  ##############################################################################
  ##############################################################################
  # ECS Cluster
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  # Transcode ECS Service
  TranscodeEcsTaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  TranscodeEcsTaskExecutionIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      Policies:
        # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_execution_IAM_role.html#task-execution-ecr-conditionkeys
        # An alternative to the managed AmazonECSTaskExecutionRolePolicy, which
        # restrics access to a specific VPC and VPC endpoint
        - PolicyName: TaskExecutionPolicy
          PolicyDocument:
            Statement:
              - Action:
                  - ecr:GetAuthorizationToken
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: "*"
              - Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  TranscodeEcsTaskIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      Policies:
        # Allow it to put CloudWatch Metrics
        - PolicyName: PutCloudWatchMetric
          PolicyDocument:
            Statement:
              - Action: cloudwatch:PutMetricData
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
      ManagedPolicyArns:
        # Transcode operations are always pulling FROM the artifact bucket
        - !Ref ArtifactBucketReadOnlyAccessPolicy
        # Also writing metadata to the artifact bucket for the output Lambda
        # to read from
        - !Ref ArtifactBucketWriteAccessPolicy
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  TranscodeEcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: !Ref TranscodeEcsTaskDefinitionImage
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref TranscodeEcsTaskLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Name: !Sub ${AWS::StackName}-transcode-container
      Cpu: "4096"
      ExecutionRoleArn: !GetAtt TranscodeEcsTaskExecutionIamRole.Arn
      Memory: "8192"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
      TaskRoleArn: !GetAtt TranscodeEcsTaskIamRole.Arn
  # FTP Copy ECS Service
  FtpCopyEcsTaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  FtpCopyEcsTaskExecutionIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      Policies:
        # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_execution_IAM_role.html#task-execution-ecr-conditionkeys
        # An alternative to the managed AmazonECSTaskExecutionRolePolicy, which
        # restrics access to a specific VPC and VPC endpoint
        - PolicyName: TaskExecutionPolicy
          PolicyDocument:
            Statement:
              - Action:
                  - ecr:GetAuthorizationToken
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: "*"
              - Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  FtpCopyEcsTaskIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      Policies:
        # Allow it to put CloudWatch Metrics
        - PolicyName: PutCloudWatchMetric
          PolicyDocument:
            Statement:
              - Action: cloudwatch:PutMetricData
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
        - PolicyName: EC2DescribeNetworkInterfaces
          PolicyDocument:
            Statement:
              - Action: ec2:DescribeNetworkInterfaces
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
        - PolicyName: ECSDescribeTasks
          PolicyDocument:
            Statement:
              - Action: ecs:DescribeTasks
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
      ManagedPolicyArns:
        - !Ref ArtifactBucketReadOnlyAccessPolicy
        - !Ref ArtifactBucketWriteAccessPolicy
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  FtpCopyEcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: !Ref FtpCopyEcsTaskDefinitionImage
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref FtpCopyEcsTaskLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Name: !Sub ${AWS::StackName}-ftp-copy-container
      Cpu: "4096"
      ExecutionRoleArn: !GetAtt FtpCopyEcsTaskExecutionIamRole.Arn
      Memory: "8192"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
      TaskRoleArn: !GetAtt FtpCopyEcsTaskIamRole.Arn
  # Artifact Bucket
  ArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 1
            Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  # Lambda Layers
  AwsSdkJsV3LambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: makefile
    Properties:
      CompatibleArchitectures:
        - x86_64
        - arm64
      CompatibleRuntimes:
        - nodejs14.x
      ContentUri: lib/aws-sdk-js-v3
      Description: aws-sdk v3 NPM module
      RetentionPolicy: Delete
  AwsSdkLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: makefile
    Properties:
      CompatibleArchitectures:
        - x86_64
        - arm64
      CompatibleRuntimes:
        - nodejs14.x
      ContentUri: lib/aws-sdk
      Description: aws-sdk NPM module
      RetentionPolicy: Delete
  AwsXraySdkLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: makefile
    Properties:
      CompatibleArchitectures:
        - x86_64
        - arm64
      CompatibleRuntimes:
        - nodejs14.x
      ContentUri: lib/aws-xray-sdk
      Description: aws-xray NPM module
      RetentionPolicy: Delete
  FileTypeLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: makefile
    Properties:
      CompatibleArchitectures:
        - x86_64
        - arm64
      CompatibleRuntimes:
        - nodejs14.x
      ContentUri: lib/file-type
      Description: file-type NPM module
      RetentionPolicy: Delete
  SharpLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: makefile
    Properties:
      ContentUri: lib/sharp
      CompatibleRuntimes:
        - nodejs14.x
      Description: sharp NPM module
      RetentionPolicy: Delete
  WavefileLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: makefile
    Properties:
      CompatibleArchitectures:
        - x86_64
        - arm64
      CompatibleRuntimes:
        - nodejs14.x
      ContentUri: lib/wavefile
      Description: wavefile NPM module
      RetentionPolicy: Delete
  FfmpegLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: makefile
    Properties:
      ContentUri: lib/ffmpeg
      CompatibleRuntimes:
        - nodejs14.x
      Description: FFmpeg binary
      RetentionPolicy: Delete
  SoxLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: makefile
    Properties:
      ContentUri: lib/sox
      CompatibleRuntimes:
        - nodejs14.x
      Description: SoX binary
      RetentionPolicy: Delete
  MpckLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: makefile
    Properties:
      ContentUri: lib/mpck
      CompatibleRuntimes:
        - nodejs14.x
      Description: mpck binary
      RetentionPolicy: Delete
  # Normalize Input Lambda
  NormalizeInputLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures: [arm64]
      CodeUri: src/lambdas/normalize-input/
      Description: >-
        Normalizes Porter job input
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayer
      MemorySize: 128
      Policies:
        - Statement:
            - Action: cloudwatch:PutMetricData
              Effect: Allow
              Resource: "*"
          Version: "2012-10-17"
      Runtime: nodejs14.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:application: Porter
      Timeout: 4
      Tracing: Active
  NormalizeInputLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${NormalizeInputLambdaFunction}
      RetentionInDays: 30
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  # Ingest Lambda
  IngestLambdaIamRole:
    # This role is granted read-only access by users to S3 buckets in order to
    # access jobs' source files. The ARN of this role must not change, or that
    # access will break
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        # For uploading files and file parts to the artifact store
        - !Ref ArtifactBucketWriteAccessPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        # Allow GET-only access to any object in S3
        - PolicyName: S3CopySourcePolicy
          PolicyDocument:
            Statement:
              - Action: s3:GetObject*
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  IngestLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures: [arm64]
      CodeUri: src/lambdas/ingest/
      Description: >-
        Ingests a source file to a predefined S3 artifact bucket
      Environment:
        Variables:
          ARTIFACT_BUCKET_NAME: !Ref ArtifactBucket
          MAX_HTTP_REDIRECTS: "10"
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayer
      MemorySize: 512
      Role: !GetAtt IngestLambdaIamRole.Arn
      Runtime: nodejs14.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:application: Porter
      Timeout: 90
      Tracing: Active
  IngestLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${IngestLambdaFunction}
      RetentionInDays: 30
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  IngestLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      AlarmName: !Sub MINOR [Porter] Ingest Lambda <${EnvironmentTypeAbbreviation}> INVOCATION FAILED (${AWS::StackName})
      AlarmDescription: !Sub >-
        The AWS Lambda function resource invoked by the ${EnvironmentType}
        Ingest state failed. This does not indicate that all retries
        of the state failed; only that a single invocation of the Lambda
        function failed.

        This can occur when a job's source file does not exist or is not
        accessible.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: LambdaFunctionsFailed
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: LambdaFunctionArn
          Value: !GetAtt IngestLambdaFunction.Arn
  # Source Type Lambda
  SourceTypeLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures: [arm64]
      CodeUri: src/lambdas/source-type/
      Description: >-
        Detect the file type of the source file
      Environment:
        Variables:
          ARTIFACT_BUCKET_NAME: !Ref ArtifactBucket
          MAX_HTTP_REDIRECTS: "10"
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayer
        - !Ref FileTypeLambdaLayer
      MemorySize: 256
      Policies:
        - !Ref ArtifactBucketReadOnlyAccessPolicy
      Runtime: nodejs14.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:application: Porter
      Timeout: 8
      Tracing: Active
  SourceTypeLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${SourceTypeLambdaFunction}
      RetentionInDays: 30
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  # Inspect Lambda
  InspectMediaLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/inspect/
      Description: >-
        Inspects (ffprobe, etc) the source file
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayer
        - !Ref FfmpegLambdaLayer
        - !Ref MpckLambdaLayer
        - !Ref SharpLambdaLayer
      MemorySize: 2048
      Policies:
        - !Ref ArtifactBucketReadOnlyAccessPolicy
      Runtime: nodejs14.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:application: Porter
      Timeout: 900
      Tracing: Active
  InspectMediaLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${InspectMediaLambdaFunction}
      RetentionInDays: 30
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  # Copy Lambda
  CopyLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        # Copy operations are always copying FROM the artifact bucket
        - !Ref ArtifactBucketReadOnlyAccessPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  CopyLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures: [arm64]
      CodeUri: src/lambdas/s3-copy-task/
      Description: >-
        Copies an object in S3 to another location in S3
      Environment:
        Variables:
          S3_DESTINATION_WRITER_ROLE: !GetAtt S3DestinationWriterRole.Arn
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayer
      MemorySize: 512
      Role: !GetAtt CopyLambdaIamRole.Arn
      Runtime: nodejs14.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:application: Porter
      Timeout: 32
      Tracing: Active
  CopyLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${CopyLambdaFunction}
      RetentionInDays: 30
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  # FTP Copy Output Lambda
  FtpCopyTaskOutputLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures: [arm64]
      CodeUri: src/lambdas/ftp-copy-task-output/
      Description: >-
        Formats the output of a transcode task result
      Environment:
        Variables:
          ARTIFACT_BUCKET_NAME: !Ref ArtifactBucket
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayer
      MemorySize: 128
      Policies:
        - !Ref ArtifactBucketReadOnlyAccessPolicy
      Runtime: nodejs14.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:application: Porter
      Timeout: 4
      Tracing: Active
  FtpCopyTaskOutputLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${FtpCopyTaskOutputLambdaFunction}
      RetentionInDays: 30
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  FtpCopyTaskOutputLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      AlarmName: !Sub MINOR [Porter] FTP output Lambda <${EnvironmentTypeAbbreviation}> INVOCATION FAILED (${AWS::StackName})
      AlarmDescription: >-
        FTP copy output format function has encountered an invocation error
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: LambdaFunctionsFailed
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: LambdaFunctionArn
          Value: !GetAtt FtpCopyTaskOutputLambdaFunction.Arn
  # Transcode Output Lambda
  TranscodeTaskOutputLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures: [arm64]
      CodeUri: src/lambdas/transcode-task-output/
      Description: >-
        Formats the output of a transcode task result
      Environment:
        Variables:
          ARTIFACT_BUCKET_NAME: !Ref ArtifactBucket
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayer
      MemorySize: 128
      Policies:
        - !Ref ArtifactBucketReadOnlyAccessPolicy
      Runtime: nodejs14.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:application: Porter
      Timeout: 4
      Tracing: Active
  TranscodeTaskOutputLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${TranscodeTaskOutputLambdaFunction}
      RetentionInDays: 30
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  TranscodeTaskOutputLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      AlarmName: !Sub MINOR [Porter] Transcode output Lambda <${EnvironmentTypeAbbreviation}> INVOCATION FAILED (${AWS::StackName})
      AlarmDescription: >-
        Transcode output format function has encountered an invocation error
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: LambdaFunctionsFailed
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: LambdaFunctionArn
          Value: !GetAtt TranscodeTaskOutputLambdaFunction.Arn
  # Image Manipulation Lambda
  ImageTransformLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        # Image operations are always fetching from the artifact bucket
        - !Ref ArtifactBucketReadOnlyAccessPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  ImageTransformLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/image-transform/
      Description: >-
        Performs image manipulation operations on a source file
      Environment:
        Variables:
          S3_DESTINATION_WRITER_ROLE: !GetAtt S3DestinationWriterRole.Arn
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayer
        - !Ref SharpLambdaLayer
      MemorySize: 1024
      Role: !GetAtt ImageTransformLambdaIamRole.Arn
      Runtime: nodejs14.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:application: Porter
      Timeout: 16
      Tracing: Active
  ImageTransformLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ImageTransformLambdaFunction}
      RetentionInDays: 30
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  # WAV Wrap Lambda
  WavWrapLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - !Ref ArtifactBucketReadOnlyAccessPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  WavWrapLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures: [arm64]
      CodeUri: src/lambdas/wav-wrap/
      Description: >-
        WAV wrap a source audio file
      Environment:
        Variables:
          S3_DESTINATION_WRITER_ROLE: !GetAtt S3DestinationWriterRole.Arn
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayer
        - !Ref WavefileLambdaLayer
      MemorySize: 3008
      Role: !GetAtt WavWrapLambdaIamRole.Arn
      Runtime: nodejs14.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:application: Porter
      Timeout: 900
      Tracing: Active
  WavWrapLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${WavWrapLambdaFunction}
      RetentionInDays: 30
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  # Silence Detection Lambda
  SilenceDetectionLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - !Ref ArtifactBucketReadOnlyAccessPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  SilenceDetectionLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures: [x86_64]
      CodeUri: src/lambdas/silence-detection/
      Description: >-
        Detect silence timings in an audio file
      # EphemeralStorage:
      #   Size: 2048
      Environment:
        Variables:
          S3_DESTINATION_WRITER_ROLE: !GetAtt S3DestinationWriterRole.Arn
          LD_LIBRARY_PATH: /opt/lib64:$LD_PRIMARY_PATH
      Handler: index.handler
      Layers:
        - !Ref SoxLambdaLayer
      MemorySize: 3008
      Role: !GetAtt SilenceDetectionLambdaIamRole.Arn
      Runtime: nodejs14.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:application: Porter
      Timeout: 900
  SilenceDetectionLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${SilenceDetectionLambdaFunction}
      RetentionInDays: 30
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  # Transcribe Start Lambda
  TranscriptionJobStartLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures: [arm64]
      CodeUri: src/lambdas/transcription-job-start/
      Description: >-
        Starts a transcription job for an artifact file
      Environment:
        Variables:
          ARTIFACT_BUCKET_NAME: !Ref ArtifactBucket
          ENVIRONMENT_TYPE: !Ref EnvironmentType
          TRANSCODE_JOB_NAME_PREFIX: !Ref TranscodeJobNamePrefix
      Handler: index.handler
      Layers:
        - !Ref AwsSdkLambdaLayer
        - !Ref AwsXraySdkLambdaLayer
      MemorySize: 128
      Policies:
        - !Ref ArtifactBucketReadOnlyAccessPolicy
        - !Ref ArtifactBucketWriteAccessPolicy
        - Statement:
            - Action:
                - transcribe:GetTranscriptionJob
                - transcribe:StartTranscriptionJob
                - transcribe:TagResource
              Effect: Allow
              Resource: "*"
          Version: "2012-10-17"
      Runtime: nodejs14.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:application: Porter
      Timeout: 4
      Tracing: Active
  TranscriptionJobStartLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${TranscriptionJobStartLambdaFunction}
      RetentionInDays: 30
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  # Transcribe Job Results Lambda
  TranscriptionJobResultsLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - !Ref ArtifactBucketReadOnlyAccessPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: TranscribeJobReadPolicy
          PolicyDocument:
            Statement:
              - Action: transcribe:GetTranscriptionJob
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  TranscriptionJobResultsLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures: [arm64]
      CodeUri: src/lambdas/transcription-job-results/
      Description: >-
        Gets the results of a transcribe job and generates task state output
      Environment:
        Variables:
          S3_DESTINATION_WRITER_ROLE: !GetAtt S3DestinationWriterRole.Arn
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayer
      MemorySize: 512
      Role: !GetAtt TranscriptionJobResultsLambdaIamRole.Arn
      Runtime: nodejs14.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:application: Porter
      Timeout: 8
      Tracing: Active
  TranscriptionJobResultsLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${TranscriptionJobResultsLambdaFunction}
      RetentionInDays: 30
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  # Callback Lambda
  CallbackLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        # Must be able to publish to whatever SNS topics are defined by a job
        - PolicyName: SnsPublish
          PolicyDocument:
            Statement:
              - Action: sns:Publish
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
        # Must be able to publish to whatever SQS queues are defined by a job
        - PolicyName: SqsSendMessage
          PolicyDocument:
            Statement:
              - Action: sqs:SendMessage
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
        # Allow it to put CloudWatch Metrics
        - PolicyName: PutCloudWatchMetric
          PolicyDocument:
            Statement:
              - Action: cloudwatch:PutMetricData
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  CallbackLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures: [arm64]
      CodeUri: src/lambdas/callbacks/
      Description: >-
        Sends a job or task callback message to a single endpoint
      Environment:
        Variables:
          MAX_HTTP_REDIRECTS: "3"
          S3_DESTINATION_WRITER_ROLE: !GetAtt S3DestinationWriterRole.Arn
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayer
      MemorySize: 128
      Role: !GetAtt CallbackLambdaIamRole.Arn
      Runtime: nodejs14.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:application: Porter
      Timeout: 4
      Tracing: Active
  CallbackLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${CallbackLambdaFunction}
      RetentionInDays: 30
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  # Job Serializer Lambda
  JobSerializerLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures: [arm64]
      CodeUri: src/lambdas/job-serializer/
      Description: >-
        Serialized Porter jobs
      Environment:
        Variables:
          JOB_EXECUTION_SNS_TOPIC_ARN: !Ref JobExecutionSnsTopic
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayer
      MemorySize: 128
      Policies:
        - Statement:
            - Action: sns:Publish
              Effect: Allow
              Resource: !Ref JobExecutionSnsTopic
          Version: "2012-10-17"
      Runtime: nodejs14.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:application: Porter
      Timeout: 4
      Tracing: Active
  JobSerializerLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${JobSerializerLambdaFunction}
      RetentionInDays: 30
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  # Normalize Output Lambda
  NormalizeOutputLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures: [arm64]
      CodeUri: src/lambdas/normalize-output/
      Description: >-
        Normalizes Porter job output
      Handler: index.handler
      Layers:
        - !Ref AwsXraySdkLambdaLayer
      MemorySize: 128
      Policies:
        - Statement:
            - Action: cloudwatch:PutMetricData
              Effect: Allow
              Resource: "*"
          Version: "2012-10-17"
      Runtime: nodejs14.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:application: Porter
      Timeout: 4
      Tracing: Active
  NormalizeOutputLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${NormalizeOutputLambdaFunction}
      RetentionInDays: 30
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  # Step Functions
  StateMachineIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: !Sub states.${AWS::Region}.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: LambdaTaskPolicy
          PolicyDocument:
            Statement:
              - Action: lambda:InvokeFunction
                Effect: Allow
                Resource:
                  - !GetAtt NormalizeInputLambdaFunction.Arn
                  - !GetAtt IngestLambdaFunction.Arn
                  - !GetAtt SourceTypeLambdaFunction.Arn
                  - !GetAtt CopyLambdaFunction.Arn
                  - !GetAtt ImageTransformLambdaFunction.Arn
                  - !GetAtt WavWrapLambdaFunction.Arn
                  - !GetAtt InspectMediaLambdaFunction.Arn
                  - !GetAtt TranscriptionJobStartLambdaFunction.Arn
                  - !GetAtt TranscriptionJobResultsLambdaFunction.Arn
                  - !GetAtt CallbackLambdaFunction.Arn
                  - !GetAtt TranscodeTaskOutputLambdaFunction.Arn
                  - !GetAtt NormalizeOutputLambdaFunction.Arn
                  - !GetAtt JobSerializerLambdaFunction.Arn
                  - !GetAtt FtpCopyTaskOutputLambdaFunction.Arn
                  - !GetAtt SilenceDetectionLambdaFunctionArn.Arn
            Version: "2012-10-17"
        - PolicyName: PassRoleToEcsPolicy
          PolicyDocument:
            Statement:
              - Action: iam:PassRole
                Effect: Allow
                Resource:
                  - !GetAtt TranscodeEcsTaskExecutionIamRole.Arn
                  - !GetAtt TranscodeEcsTaskIamRole.Arn
                  - !GetAtt FtpCopyEcsTaskExecutionIamRole.Arn
                  - !GetAtt FtpCopyEcsTaskIamRole.Arn
            Version: "2012-10-17"
        # https://docs.aws.amazon.com/step-functions/latest/dg/ecs-iam.html
        - PolicyName: EcsSyncStaticResourcesPolicy
          PolicyDocument:
            Statement:
              - Action: ecs:RunTask
                Effect: Allow
                Resource:
                  - !Ref TranscodeEcsTaskDefinition
                  - !Ref FtpCopyEcsTaskDefinition
              - Action:
                  - ecs:StopTask
                  - ecs:DescribeTasks
                Effect: Allow
                Resource: "*"
              - Action:
                  - events:PutTargets
                  - events:PutRule
                  - events:DescribeRule
                Effect: Allow
                Resource: !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForECSTaskRule
            Version: "2012-10-17"
        # https://docs.aws.amazon.com/step-functions/latest/dg/ecs-iam.html
        - PolicyName: EcsSyncDynamicResourcesPolicy
          PolicyDocument:
            Statement:
              - Action:
                  - ecs:RunTask
                  - ecs:StopTask
                  - ecs:DescribeTasks
                Effect: Allow
                Resource: "*"
              - Action:
                  - events:PutTargets
                  - events:PutRule
                  - events:DescribeRule
                Effect: Allow
                Resource: !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForECSTaskRule
            Version: "2012-10-17"
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Porter }
  StateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionSubstitutions:
        AwsPartition: !Ref AWS::Partition
        AwsRegion: !Ref AWS::Region
        CallbackLambdaFunctionArn: !GetAtt CallbackLambdaFunction.Arn
        CopyLambdaFunctionArn: !GetAtt CopyLambdaFunction.Arn
        EcsClusterArn: !GetAtt EcsCluster.Arn
        ImageTransformLambdaFunctionArn: !GetAtt ImageTransformLambdaFunction.Arn
        SilenceDetectionLambdaFunctionArn: !GetAtt SilenceDetectionLambdaFunction.Arn
        IngestLambdaFunctionArn: !GetAtt IngestLambdaFunction.Arn
        InspectMediaLambdaFunctionArn: !GetAtt InspectMediaLambdaFunction.Arn
        JobSerializerLambdaFunctionArn: !GetAtt JobSerializerLambdaFunction.Arn
        NormalizeInputLambdaFunctionArn: !GetAtt NormalizeInputLambdaFunction.Arn
        NormalizeOutputLambdaFunctionArn: !GetAtt NormalizeOutputLambdaFunction.Arn
        S3DestinationWriterRoleArn: !GetAtt S3DestinationWriterRole.Arn
        SourceTypeLambdaFunctionArn: !GetAtt SourceTypeLambdaFunction.Arn
        FtpCopyContainerName: !Sub ${AWS::StackName}-ftp-copy-container
        FtpCopyEcsTaskDefinitionArn: !Ref FtpCopyEcsTaskDefinition
        FtpCopyTaskOutputLambdaFunctionArn: !GetAtt FtpCopyTaskOutputLambdaFunction.Arn
        TranscodeContainerName: !Sub ${AWS::StackName}-transcode-container
        TranscodeEcsTaskDefinitionArn: !Ref TranscodeEcsTaskDefinition
        TranscodeTaskOutputLambdaFunctionArn: !GetAtt TranscodeTaskOutputLambdaFunction.Arn
        TranscriptionJobResultsLambdaFunctionArn: !GetAtt TranscriptionJobResultsLambdaFunction.Arn
        TranscriptionJobStartLambdaFunctionArn: !GetAtt TranscriptionJobStartLambdaFunction.Arn
        VpcPublicSubnet1: !Ref PublicSubnet1
        VpcPublicSubnet2: !Ref PublicSubnet2
        WavWrapLambdaFunctionArn: !GetAtt WavWrapLambdaFunction.Arn
      DefinitionUri: state-machine.asl.yml
      Role: !GetAtt StateMachineIamRole.Arn
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:application: Porter
  StateMachineTimedOutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub MAJOR [Porter] State machine <${EnvironmentTypeAbbreviation}> EXECUTION TIMED OUT (${AWS::StackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Porter state machine has had an execution time out.
        This could be for any reason, but the maximum execution time is 1 year.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: ExecutionsTimedOut
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref StateMachine
  StateMachineThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub MAJOR [Porter] State machine <${EnvironmentTypeAbbreviation}> STATE TRANSISITON THROTTLED (${AWS::StackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Porter state machine has had state transitions
        throttled. This is a limit imposed by AWS Step Functions itself within
        the state machine, not related to throttling of services used as state
        resources, such as AWS Lambda or Fargate.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: ExecutionThrottled
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref StateMachine
  StateMachineFailureAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub MAJOR [Porter] State machine <${EnvironmentTypeAbbreviation}> EXECUTION FAILED (${AWS::StackName})
      AlarmDescription: >-
        A state machine execution failure indicates that an error occurred and
        was unable to be caught and handled gracefully. This likely means the
        job failed in some way and that some or all callbacks were unsuccessful.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: ExecutionsFailed
      Namespace: AWS/States
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref StateMachine
  # Job and Task Alarms
  JobsFailedAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProductionResources
    Properties:
      AlarmName: !Sub MINOR [Porter] State machine <${EnvironmentTypeAbbreviation}> EXPERIENCED JOB FAILURE (${AWS::StackName})
      AlarmDescription: >-
        A Porter job failure indicates that one or more of the tasks that the
        job included weren't able to complete successfully. This does not
        indicate an issue with the state machine execution, and some tasks may
        have been successful. Callbacks about the failed job were sent
        successfully.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref StateMachine
      EvaluationPeriods: 1
      MetricName: JobsFailed
      Namespace: PRX/Porter
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching

  # CloudWatch Dashboard
  Dashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardBody: !Sub |-
        {
          "widgets": [
            {
              "height": 3,
              "width": 9,
              "y": 0,
              "x": 15,
              "type": "metric",
              "properties": {
                "metrics": [
                  [ "PRX/Porter", "JobsStarted", "StateMachineArn", "${StateMachine}", { "label": "Started" } ],
                  [ "PRX/Porter", "JobsCompleted", "StateMachineArn", "${StateMachine}", { "label": "Completed" } ],
                  [ "PRX/Porter", "JobsSucceeded", "StateMachineArn", "${StateMachine}", { "label": "Succeeded" } ],
                  [ "PRX/Porter", "JobsFailed", "StateMachineArn", "${StateMachine}", { "label": "Failed" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Sum",
                "period": 900,
                "title": "Jobs",
                "yAxis": {
                  "right": {
                    "min": 0,
                    "showUnits": false
                  },
                  "left": {
                    "min": 0,
                    "showUnits": false
                  }
                }
              }
            },
            {
              "height": 3,
              "width": 12,
              "y": 0,
              "x": 0,
              "type": "metric",
              "properties": {
                "metrics": [
                  [ "PRX/Porter", "JobsStarted", "StateMachineArn", "${StateMachine}", { "label": "Started" } ],
                  [ "PRX/Porter", "JobsCompleted", "StateMachineArn", "${StateMachine}", { "label": "Completed" } ],
                  [ "PRX/Porter", "JobsSucceeded", "StateMachineArn", "${StateMachine}", { "label": "Succeeded", "visible": false } ],
                  [ "PRX/Porter", "JobsFailed", "StateMachineArn", "${StateMachine}", { "label": "Failed" } ]
                ],
                "view": "singleValue",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Sum",
                "period": 900,
                "title": "Jobs",
                "setPeriodToTimeRange": true
              }
            },
            {
              "height": 3,
              "width": 9,
              "y": 3,
              "x": 15,
              "type": "metric",
              "properties": {
                "metrics": [
                  [ "PRX/Porter", "TasksRequested", "StateMachineArn", "${StateMachine}", { "label": "Requested" } ],
                  [ "PRX/Porter", "TasksSucceeded", "StateMachineArn", "${StateMachine}", { "color": "#2ca02c", "label": "Succeeded" } ],
                  [ "PRX/Porter", "TasksFailed", "StateMachineArn", "${StateMachine}", { "color": "#d62728", "label": "Failed" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "period": 900,
                "stat": "Sum",
                "title": "Tasks",
                "yAxis": {
                  "left": {
                    "showUnits": false,
                    "min": 0
                  },
                  "right": {
                    "min": 0,
                    "showUnits": false
                  }
                }
              }
            },
            {
              "height": 3,
              "width": 12,
              "y": 3,
              "x": 0,
              "type": "metric",
              "properties": {
                "metrics": [
                  [ "PRX/Porter", "TasksRequested", "StateMachineArn", "${StateMachine}", { "label": "Requested" } ],
                  [ "PRX/Porter", "TasksSucceeded", "StateMachineArn", "${StateMachine}", { "color": "#2ca02c", "label": "Succeeded" } ],
                  [ "PRX/Porter", "TasksFailed", "StateMachineArn", "${StateMachine}", { "color": "#d62728", "label": "Failed" } ]
                ],
                "view": "singleValue",
                "stacked": false,
                "region": "${AWS::Region}",
                "period": 900,
                "stat": "Sum",
                "title": "Tasks",
                "setPeriodToTimeRange": true,
                "singleValueFullPrecision": false
              }
            },
            {
              "height": 6,
              "width": 3,
              "y": 0,
              "x": 12,
              "type": "text",
              "properties": {
                "markdown": "\n[Step Functions Console](https://console.aws.amazon.com/states/home?region=${AWS::Region}#/statemachines/view/${StateMachine})\n[Unsuccessful jobs Insights](https://console.aws.amazon.com/cloudwatch/home?region=us-east-1#logsV2:logs-insights$3FqueryDetail$3D$257E$2528end$257E0$257Estart$257E-3600$257EtimeType$257E$2527RELATIVE$257Eunit$257E$2527seconds$257EeditorString$257E$2527sort*20*40timestamp*20desc*0a*7c*20fields*20ispresent*28input.Message.JobResult.FailedTasks.0.Type*29*20as*20HasFailedTasks*0a*7c*20fields*20input.Message.JobResult.State*20as*20FailureReason*0a*7c*20fields*20input.Execution.Id*20as*20StepFunctionExecutionId*0a*7c*20display*20FailureReason*2c*20HasFailedTasks*2c*20StepFunctionExecutionId*0a*7c*20filter*20*28HasFailedTasks*20*3d*3d*201*29*20or*20*28FailureReason*20in*20*5b*22NORMALIZE_INPUT_ERROR*22*2c*20*22SOURCE_FILE_INGEST_ERROR*22*2c*20*22SOURCE_FILE_TYPE_DETECTION_ERROR*22*2c*20*22ITERATOR_ERROR*22*5d*29*0a*0a*23*20fields*20*40requestId*0a*23*20*7c*20filter*20input.Message.JobResult.Execution.Id*20like*20*2f___SOME_EXECUTION_ID___*2f*0a*23*20*7c*20sort*20*40timestamp*20desc*0a*0a*23*20fields*20*40message*20*7c*20filter*20*40requestId*20like*20*2f___SOME_REQUEST_ID___*2f*20*7c*20sort*20*40timestamp*20asc$257EisLiveTail$257Efalse$257EqueryId$257E$2527d0048a1b-70cb-4010-9051-4ecab7d78a13$257Esource$257E$2528$257E$2527${CallbackLambdaLogGroup}$2529$2529)\n"
              }
            },
            {
              "height": 3,
              "width": 9,
              "y": 6,
              "x": 15,
              "type": "metric",
              "properties": {
                "metrics": [
                  [ "AWS/States", "ExecutionsStarted", "StateMachineArn", "${StateMachine}", { "label": "Started" } ],
                  [ "AWS/States", "ExecutionsSucceeded", "StateMachineArn", "${StateMachine}", { "color": "#2ca02c", "label": "Succeeded" } ],
                  [ "AWS/States", "ExecutionsAborted", "StateMachineArn", "${StateMachine}", { "yAxis": "right", "color": "#ff9896", "label": "Aborted" } ],
                  [ "AWS/States", "ExecutionsTimedOut", "StateMachineArn", "${StateMachine}", { "yAxis": "right", "color": "#ff9896", "label": "Timed Out" } ],
                  [ "AWS/States", "ExecutionThrottled", "StateMachineArn", "${StateMachine}", { "yAxis": "right", "color": "#ff9896", "label": "Throttled" } ],
                  [ "AWS/States", "ExecutionsFailed", "StateMachineArn", "${StateMachine}", { "color": "#d62728", "yAxis": "right", "label": "Failed" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Sum",
                "period": 900,
                "title": "Executions"
              }
            },
            {
              "height": 3,
              "width": 12,
              "y": 6,
              "x": 0,
              "type": "metric",
              "properties": {
                "metrics": [
                  [ "AWS/States", "ExecutionsStarted", "StateMachineArn", "${StateMachine}", { "label": "Started" } ],
                  [ "AWS/States", "ExecutionsSucceeded", "StateMachineArn", "${StateMachine}", { "color": "#2ca02c", "label": "Succeeded" } ],
                  [ "AWS/States", "ExecutionsAborted", "StateMachineArn", "${StateMachine}", { "yAxis": "right", "color": "#ff9896", "label": "Aborted", "visible": false } ],
                  [ "AWS/States", "ExecutionsTimedOut", "StateMachineArn", "${StateMachine}", { "yAxis": "right", "color": "#ff9896", "label": "Timed Out", "visible": false } ],
                  [ "AWS/States", "ExecutionThrottled", "StateMachineArn", "${StateMachine}", { "yAxis": "right", "color": "#ff9896", "label": "Throttled", "visible": false } ],
                  [ "AWS/States", "ExecutionsFailed", "StateMachineArn", "${StateMachine}", { "color": "#d62728", "yAxis": "right", "label": "Failed" } ]
                ],
                "view": "singleValue",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Sum",
                "period": 900,
                "title": "Executions",
                "setPeriodToTimeRange": true,
                "singleValueFullPrecision": false
              }
            },
            {
              "height": 3,
              "width": 9,
              "y": 9,
              "x": 15,
              "type": "metric",
              "properties": {
                "metrics": [
                  [ { "expression": "m1/1000/60", "label": "p50 Duration (minutes)", "id": "e1", "region": "${AWS::Region}" } ],
                  [ { "expression": "m2/1000/60", "label": "p90 Duration (minutes)", "id": "e2", "region": "${AWS::Region}" } ],
                  [ "AWS/States", "ExecutionTime", "StateMachineArn", "${StateMachine}", { "id": "m1", "visible": false } ],
                  [ "AWS/States", "ExecutionTime", "StateMachineArn", "${StateMachine}", { "id": "m2", "visible": false, "stat": "p90" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "period": 300,
                "stat": "p50",
                "title": "Execution Time",
                "yAxis": {
                  "left": {
                    "showUnits": false,
                    "min": 0
                  },
                  "right": {
                    "showUnits": false,
                    "min": 0
                  }
                }
              }
            }
          ]
        }
      DashboardName: !Sub ${AWS::StackName}-${AWS::Region}-Overview

Outputs:
  JobExecutionSnsTopicArn:
    Value: !Ref JobExecutionSnsTopic
  JobExecutionSqsQueueArn:
    Value: !GetAtt JobExecutionSqsQueue.Arn
  JobExecutionSqsQueueUrl:
    Value: !Ref JobExecutionSqsQueue
  S3DestinationWriterRoleArn:
    Value: !GetAtt S3DestinationWriterRole.Arn
  IngestLambdaIamRoleArn:
    Value: !GetAtt IngestLambdaIamRole.Arn
  CustomEventBusName:
    Value: !Ref CustomEventBus
  StateMachineArn:
    Value: !Ref StateMachine
