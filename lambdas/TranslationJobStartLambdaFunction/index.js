// Starts a translate job in Amazon Translate for the artifact. This is
// called with the waitForTaskToken pattern, so once the job has finished
// something (not this function), will need to send a SendTaskSuccess message
// with the provided task token for the execution to proceed.
// A file is written to the artifact store in S3 containing the task token.
// The object key matches the transcribe job name, so that it can be deduced
// from events generated by the job.
//
// Job names are given a prefix that is unique to this deployment of Porter.
// This is necessary becasue the CloudWatch Events rule that watches for
// transcription jobs will fire for *all* jobs, so there needs to be a way to
// filter out jobs originating elsewhere.
//
// The results of this state are defined by the parameters passed to
// SendTaskSuccess, NOT this function.
//
// https://docs.aws.amazon.com/translate/latest/dg/API_StartTextTranslationJob.html

const AWSXRay = require('aws-xray-sdk');

const AWS = AWSXRay.captureAWS(require('aws-sdk'));

const s3 = new AWS.S3({ apiVersion: '2006-03-01' });
const translate = new AWS.Translate({ apiVersion: '2017-07-01' });

exports.handler = async (event) => {
  console.log(JSON.stringify({ msg: 'State input', input: event }));

  // Only start the job if the artifact type is supported
  if (!['text/plain', 'text/html'].includes(event.Artifact.Descriptor.MIME)) {
    throw new Error('Artifact format not supported');
  }

  // Should be unique, even if an execution includes multiple translate jobs
  const translationJobName = `${event.Execution.Id.split(':').pop()}-${
    event.TaskIteratorIndex
  }`;

  // Write the task token provided by the state machine context to S3
  await s3
    .putObject({
      Bucket: event.Artifact.BucketName,
      Key: `${translationJobName}.TaskToken`,
      Body: event.TaskToken,
    })
    .promise();

  // startTextTranslationJob expects an input *folder*, not a file, so this
  // takes the artifact object key and removes the file name from the end
  const artifactObjectPrefix = event.Artifact.ObjectKey.split('/')
    .slice(0, -1)
    .join('/');

  await translate
    .startTextTranslationJob({
      // ClientToken: jobClientToken,
      JobName: translationJobName,
      SourceLanguageCode: event.Task.SourceLanguageCode,
      TargetLanguageCodes: event.Task.TargetLanguageCodes,
      DataAccessRoleArn: 'tktk',
      InputDataConfig: {
        ContentType: 'string',
        S3Uri: `s3://${event.Artifact.BucketName}/${artifactObjectPrefix}`,
      },
      OutputDataConfig: {
        S3Uri: `s3://${event.Task.Destination.BucketName}/${event.Task.Destination.ObjectPrefix}`,
      },
    })
    .promise();
};
